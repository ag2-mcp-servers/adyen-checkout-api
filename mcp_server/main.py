# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:02:05+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic
from fastapi import Header, Path, Query

from models import (
    ApplePaySessionResponse,
    CardDetailsRequest,
    CardDetailsResponse,
    CheckoutBalanceCheckRequest,
    CheckoutBalanceCheckResponse,
    CheckoutCancelOrderRequest,
    CheckoutCancelOrderResponse,
    CheckoutCreateOrderRequest,
    CheckoutCreateOrderResponse,
    CheckoutUtilityRequest,
    CheckoutUtilityResponse,
    CreateApplePaySessionRequest,
    CreateCheckoutSessionRequest,
    CreateCheckoutSessionResponse,
    CreatePaymentAmountUpdateRequest,
    CreatePaymentCancelRequest,
    CreatePaymentCaptureRequest,
    CreatePaymentLinkRequest,
    CreatePaymentRefundRequest,
    CreatePaymentReversalRequest,
    CreateStandalonePaymentCancelRequest,
    DetailsRequest,
    DonationResponse,
    ListStoredPaymentMethodsResponse,
    PaymentAmountUpdateResource,
    PaymentCancelResource,
    PaymentCaptureResource,
    PaymentDetailsResponse,
    PaymentDonationRequest,
    PaymentLinkResponse,
    PaymentMethodsRequest,
    PaymentMethodsResponse,
    PaymentRefundResource,
    PaymentRequest,
    PaymentResponse,
    PaymentReversalResource,
    PaymentSetupRequest,
    PaymentSetupResponse,
    PaymentVerificationRequest,
    PaymentVerificationResponse,
    ServiceError,
    StandalonePaymentCancelResource,
    StoredPaymentMethodResource,
    UpdatePaymentLinkRequest,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).\n\nThis API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).\n\n## Authentication\nEach request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:\n\n```\ncurl\n-H "Content-Type: application/json" \\\n-H "X-API-Key: YOUR_API_KEY" \\\n...\n```\n## Versioning\nCheckout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://checkout-test.adyen.com/v70/payments\n```\n\n## Going live\n\nTo access the live endpoints, you need an API key from your live Customer Area.\n\nThe live endpoint URLs contain a prefix which is unique to your company account, for example:\n```\nhttps://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments\n```\n\nGet your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.\n\nWhen preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you\'ve got all the required configuration in place.\n\n## Release notes\nHave a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='Adyen Checkout API',
    version='70',
    servers=[{'url': 'https://checkout-test.adyen.com/v70'}],
)


@app.post(
    '/applePay/sessions',
    description=""" You need to use this endpoint if you have an API-only integration with Apple Pay which uses Adyen's Apple Pay certificate.

The endpoint returns the Apple Pay session data which you need to complete the [Apple Pay session validation](https://docs.adyen.com/payment-methods/apple-pay/api-only?tab=adyen-certificate-validation_1#complete-apple-pay-session-validation). """,
    tags=['apple_pay_management', 'payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_apple_pay_sessions(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreateApplePaySessionRequest = None,
):
    """
    Get an Apple Pay session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cancels',
    description=""" Cancels the authorisation on a payment that has not yet been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures), and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**TECHNICAL_CANCEL** webhook](https://docs.adyen.com/online-payments/cancel#cancellation-webhook).

If you want to cancel a payment using the [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference), use the [`/payments/{paymentPspReference}/cancels`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/cancels) endpoint instead.

If you want to cancel a payment but are not sure whether it has been captured, use the [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.

For more information, refer to [Cancel](https://docs.adyen.com/online-payments/cancel). """,
    tags=['payment_transaction_handling', 'order_processing'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_cancels(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreateStandalonePaymentCancelRequest = None,
):
    """
    Cancel an authorised payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cardDetails',
    description=""" Send a request with at least the first 6 digits of the card number to get a response with an array of brands on the card. If you include [your supported brands](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cardDetails__reqParam_supportedBrands) in the request, the response also tells you if you support each [brand that was identified](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cardDetails__resParam_details).

If you have an API-only integration and collect card data, use this endpoint to find out if the shopper's card is co-branded. For co-branded cards, you must let the shopper choose the brand to pay with  if you support both brands.

 """,
    tags=['payment_source_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_card_details(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CardDetailsRequest = None,
):
    """
    Get the list of brands on the card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/donations',
    description=""" Takes in the donation token generated by the `/payments` request and uses it to make the donation for the donation account specified in the request.

For more information, see [Donations](https://docs.adyen.com/online-payments/donations). """,
    tags=['payment_transaction_handling', 'donation_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_donations(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: PaymentDonationRequest = None,
):
    """
    Start a transaction for donations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orders',
    description=""" Creates an order to be used for partial payments. Make a POST `/orders` call before making a `/payments` call when processing payments with different payment methods. """,
    tags=['order_processing'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_orders(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CheckoutCreateOrderRequest = None,
):
    """
    Create an order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orders/cancel',
    description=""" Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method. """,
    tags=['order_processing'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_orders_cancel(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CheckoutCancelOrderRequest = None,
):
    """
    Cancel an order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/originKeys',
    description=""" This operation takes the origin domains and returns a JSON object containing the corresponding origin keys for the domains. 
> If you're still using origin key for your Web Drop-in or Components integration, we recommend [switching to client key](https://docs.adyen.com/development-resources/client-side-authentication/migrate-from-origin-key-to-client-key). This allows you to use a single key for all origins, add or remove origins without generating a new key, and detect the card type from the number entered in your payment form.  """,
    tags=['origin_key_generation'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_origin_keys(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CheckoutUtilityRequest = None,
):
    """
    Create originKey values for domains
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/paymentLinks',
    description=""" Creates a payment link to our hosted payment form where shoppers can pay. The list of payment methods presented to the shopper depends on the `currency` and `country` parameters sent in the request.

For more information, refer to [Pay by Link documentation](https://docs.adyen.com/online-payments/pay-by-link#create-payment-links-through-api). """,
    tags=['payment_transaction_handling', 'payment_link_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payment_links(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreatePaymentLinkRequest = None,
):
    """
    Create a payment link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentLinks/{linkId}',
    description=""" Retrieves the payment link details using the payment link `id`. """,
    tags=['payment_link_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_payment_links_link_id(link_id: str = Path(..., alias='linkId')):
    """
    Get a payment link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/paymentLinks/{linkId}',
    description=""" Updates the status of a payment link. Use this endpoint to [force the expiry of a payment link](https://docs.adyen.com/online-payments/pay-by-link#update-payment-link-status). """,
    tags=['payment_link_management', 'payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_payment_links_link_id(
    link_id: str = Path(..., alias='linkId'), body: UpdatePaymentLinkRequest = None
):
    """
    Update the status of a payment link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/paymentMethods',
    description=""" Queries the available payment methods for a transaction based on the transaction context (like amount, country, and currency). Besides giving back a list of the available payment methods, the response also returns which input details you need to collect from the shopper (to be submitted to `/payments`).

Although we highly recommend using this endpoint to ensure you are always offering the most up-to-date list of payment methods, its usage is optional. You can, for example, also cache the `/paymentMethods` response and update it once a week. """,
    tags=['payment_source_management', 'payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payment_methods(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: PaymentMethodsRequest = None,
):
    """
    Get a list of available payment methods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/paymentMethods/balance',
    description=""" Retrieves the balance remaining on a shopper's gift card. To check a gift card's balance, make a POST `/paymentMethods/balance` call and include the gift card's details inside a `paymentMethod` object. """,
    tags=['payment_source_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payment_methods_balance(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CheckoutBalanceCheckRequest = None,
):
    """
    Get the balance of a gift card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/paymentSession',
    description=""" Provides the data object that can be used to start the Checkout SDK. To set up the payment, pass its amount, currency, and other required parameters. We use this to optimise the payment flow and perform better risk assessment of the transaction.

For more information, refer to [How it works](https://docs.adyen.com/online-payments#howitworks). """,
    tags=['payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payment_session(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: PaymentSetupRequest = None,
):
    """
    Create a payment session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments',
    description=""" Sends payment parameters (like amount, country, and currency) together with other required input details collected from the shopper. To know more about required parameters for specific payment methods, refer to our [payment method guides](https://docs.adyen.com/payment-methods). 
The response depends on the [payment flow](https://docs.adyen.com/payment-methods#payment-flow):
* For a direct flow, the response includes a `pspReference` and a `resultCode` with the payment result, for example **Authorised** or **Refused**. 
* For a redirect or additional action, the response contains an `action` object.  """,
    tags=['payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: PaymentRequest = None,
):
    """
    Start a transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments/details',
    description=""" Submits details for a payment created using `/payments`. This step is only needed when no final state has been reached on the `/payments` request, for example when the shopper was redirected to another page to complete the payment.

 """,
    tags=['payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments_details(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: DetailsRequest = None,
):
    """
    Submit details for a payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments/result',
    description=""" Verifies the payment result using the payload returned from the Checkout SDK.

For more information, refer to [How it works](https://docs.adyen.com/online-payments#howitworks). """,
    tags=['payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments_result(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: PaymentVerificationRequest = None,
):
    """
    Verify a payment result
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments/{paymentPspReference}/amountUpdates',
    description=""" Increases or decreases the authorised payment amount and returns a unique reference for this request. You get the outcome of the request asynchronously, in an [**AUTHORISATION_ADJUSTMENT** webhook](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes).

You can only update authorised amounts that have not yet been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures).

The amount you specify in the request is the updated amount, which is larger or smaller than the initial authorised amount.

For more information, refer to [Authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#use-cases). """,
    tags=['payment_transaction_handling', 'order_processing'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments_payment_psp_reference_amount_updates(
    payment_psp_reference: str = Path(..., alias='paymentPspReference'),
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreatePaymentAmountUpdateRequest = None,
):
    """
    Update an authorised amount
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments/{paymentPspReference}/cancels',
    description=""" Cancels the authorisation on a payment that has not yet been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/paymentPspReference/captures), and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**CANCELLATION** webhook](https://docs.adyen.com/online-payments/cancel#cancellation-webhook).

If you want to cancel a payment but don't have the [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference), use the [`/cancels`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cancels) endpoint instead.

If you want to cancel a payment but are not sure whether it has been captured, use the [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.

For more information, refer to [Cancel](https://docs.adyen.com/online-payments/cancel). """,
    tags=['payment_transaction_handling', 'order_processing'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments_payment_psp_reference_cancels(
    payment_psp_reference: str = Path(..., alias='paymentPspReference'),
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreatePaymentCancelRequest = None,
):
    """
    Cancel an authorised payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments/{paymentPspReference}/captures',
    description="""  Captures an authorised payment and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**CAPTURE** webhook](https://docs.adyen.com/online-payments/capture#capture-notification).

You can capture either the full authorised amount or a part of the authorised amount. By default, any unclaimed amount after a partial capture gets cancelled. This does not apply if you enabled multiple partial captures on your account and the payment method supports multiple partial captures. 

[Automatic capture](https://docs.adyen.com/online-payments/capture#automatic-capture) is the default setting for most payment methods. In these cases, you don't need to make capture requests. However, making capture requests for payments that are captured automatically does not result in double charges.

For more information, refer to [Capture](https://docs.adyen.com/online-payments/capture). """,
    tags=['payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments_payment_psp_reference_captures(
    payment_psp_reference: str = Path(..., alias='paymentPspReference'),
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreatePaymentCaptureRequest = None,
):
    """
    Capture an authorised payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments/{paymentPspReference}/refunds',
    description=""" Refunds a payment that has been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures), and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**REFUND** webhook](https://docs.adyen.com/online-payments/refund#refund-webhook).

You can refund either the full captured amount or a part of the captured amount. You can also perform multiple partial refunds, as long as their sum doesn't exceed the captured amount.

> Some payment methods do not support partial refunds. To learn if a payment method supports partial refunds, refer to the payment method page such as [cards](https://docs.adyen.com/payment-methods/cards#supported-cards), [iDEAL](https://docs.adyen.com/payment-methods/ideal), or [Klarna](https://docs.adyen.com/payment-methods/klarna). 

If you want to refund a payment but are not sure whether it has been captured, use the [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.

For more information, refer to [Refund](https://docs.adyen.com/online-payments/refund). """,
    tags=['payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments_payment_psp_reference_refunds(
    payment_psp_reference: str = Path(..., alias='paymentPspReference'),
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreatePaymentRefundRequest = None,
):
    """
    Refund a captured payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payments/{paymentPspReference}/reversals',
    description=""" [Refunds](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/refunds) a payment if it has already been captured, and [cancels](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/cancels) a payment if it has not yet been captured. Returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**CANCEL_OR_REFUND** webhook](https://docs.adyen.com/online-payments/reverse#cancel-or-refund-webhook).

The reversed amount is always the full payment amount.
> Do not use this request for payments that involve multiple partial captures.

For more information, refer to [Reversal](https://docs.adyen.com/online-payments/reversal). """,
    tags=['payment_transaction_handling', 'order_processing'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payments_payment_psp_reference_reversals(
    payment_psp_reference: str = Path(..., alias='paymentPspReference'),
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreatePaymentReversalRequest = None,
):
    """
    Refund or cancel a payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sessions',
    description=""" Creates a payment session for [Web Drop-in](https://docs.adyen.com/online-payments/web-drop-in) and [Web Components](https://docs.adyen.com/online-payments/web-components) integrations.

The response contains encrypted payment session data. The front end then uses the session data to make any required server-side calls for the payment flow.

You get the payment outcome asynchronously, in an [AUTHORISATION](https://docs.adyen.com/api-explorer/#/Webhooks/latest/post/AUTHORISATION) webhook. """,
    tags=['payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_sessions(
    idempotency__key: Optional[str] = Header(None, alias='Idempotency-Key'),
    body: CreateCheckoutSessionRequest = None,
):
    """
    Create a payment session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/storedPaymentMethods',
    description=""" Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper's payment. A summary of the stored details is included.

 """,
    tags=['stored_payment_information', 'payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_stored_payment_methods(
    shopper_reference: Optional[str] = Query(None, alias='shopperReference'),
    merchant_account: Optional[str] = Query(None, alias='merchantAccount'),
):
    """
    Get tokens for stored payment details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/storedPaymentMethods/{recurringId}',
    description=""" Deletes the token identified in the path. The token can no longer be used with payment requests. """,
    tags=['stored_payment_information', 'payment_transaction_handling'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def delete_stored_payment_methods_recurring_id(
    recurring_id: str = Path(..., alias='recurringId'),
    shopper_reference: str = Query(..., alias='shopperReference'),
    merchant_account: str = Query(..., alias='merchantAccount'),
):
    """
    Delete a token for stored payment details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)

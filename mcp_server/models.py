# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:02:05+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class AccountAgeIndicator(Enum):
    notApplicable = 'notApplicable'
    thisTransaction = 'thisTransaction'
    lessThan30Days = 'lessThan30Days'
    from30To60Days = 'from30To60Days'
    moreThan60Days = 'moreThan60Days'


class AccountChangeIndicator(Enum):
    thisTransaction = 'thisTransaction'
    lessThan30Days = 'lessThan30Days'
    from30To60Days = 'from30To60Days'
    moreThan60Days = 'moreThan60Days'


class AccountType(Enum):
    notApplicable = 'notApplicable'
    credit = 'credit'
    debit = 'debit'


class DeliveryAddressUsageIndicator(Enum):
    thisTransaction = 'thisTransaction'
    lessThan30Days = 'lessThan30Days'
    from30To60Days = 'from30To60Days'
    moreThan60Days = 'moreThan60Days'


class PasswordChangeIndicator(Enum):
    notApplicable = 'notApplicable'
    thisTransaction = 'thisTransaction'
    lessThan30Days = 'lessThan30Days'
    from30To60Days = 'from30To60Days'
    moreThan60Days = 'moreThan60Days'


class PaymentAccountIndicator(Enum):
    notApplicable = 'notApplicable'
    thisTransaction = 'thisTransaction'
    lessThan30Days = 'lessThan30Days'
    from30To60Days = 'from30To60Days'
    moreThan60Days = 'moreThan60Days'


class AccountInfo(BaseModel):
    accountAgeIndicator: Optional[AccountAgeIndicator] = Field(
        None,
        description="Indicator for the length of time since this shopper account was created in the merchant's environment.\nAllowed values:\n* notApplicable\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
    )
    accountChangeDate: Optional[datetime] = Field(
        None, description="Date when the shopper's account was last changed."
    )
    accountChangeIndicator: Optional[AccountChangeIndicator] = Field(
        None,
        description="Indicator for the length of time since the shopper's account was last updated.\nAllowed values:\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
    )
    accountCreationDate: Optional[datetime] = Field(
        None, description="Date when the shopper's account was created."
    )
    accountType: Optional[AccountType] = Field(
        None,
        description='Indicates the type of account. For example, for a multi-account card product.\nAllowed values:\n* notApplicable\n* credit\n* debit',
    )
    addCardAttemptsDay: Optional[int] = Field(
        None,
        description='Number of attempts the shopper tried to add a card to their account in the last day.',
    )
    deliveryAddressUsageDate: Optional[datetime] = Field(
        None, description='Date the selected delivery address was first used.'
    )
    deliveryAddressUsageIndicator: Optional[DeliveryAddressUsageIndicator] = Field(
        None,
        description='Indicator for the length of time since this delivery address was first used.\nAllowed values:\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days',
    )
    homePhone: Optional[str] = Field(
        None, description="Shopper's home phone number (including the country code)."
    )
    mobilePhone: Optional[str] = Field(
        None, description="Shopper's mobile phone number (including the country code)."
    )
    passwordChangeDate: Optional[datetime] = Field(
        None, description='Date when the shopper last changed their password.'
    )
    passwordChangeIndicator: Optional[PasswordChangeIndicator] = Field(
        None,
        description='Indicator when the shopper has changed their password.\nAllowed values:\n* notApplicable\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days',
    )
    pastTransactionsDay: Optional[int] = Field(
        None,
        description='Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.',
    )
    pastTransactionsYear: Optional[int] = Field(
        None,
        description='Number of all transactions (successful and abandoned) from this shopper in the past year.',
    )
    paymentAccountAge: Optional[datetime] = Field(
        None, description="Date this payment method was added to the shopper's account."
    )
    paymentAccountIndicator: Optional[PaymentAccountIndicator] = Field(
        None,
        description="Indicator for the length of time since this payment method was added to this shopper's account.\nAllowed values:\n* notApplicable\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
    )
    purchasesLast6Months: Optional[int] = Field(
        None, description='Number of successful purchases in the last six months.'
    )
    suspiciousActivity: Optional[bool] = Field(
        None, description='Whether suspicious activity was recorded on this account.'
    )
    workPhone: Optional[str] = Field(
        None, description="Shopper's work phone number (including the country code)."
    )


class ChAccAgeInd(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'


class ChAccChangeInd(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'


class ChAccPwChangeInd(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'


class PaymentAccInd(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'


class ShipAddressUsageInd(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'


class ShipNameIndicator(Enum):
    field_01 = '01'
    field_02 = '02'


class SuspiciousAccActivity(Enum):
    field_01 = '01'
    field_02 = '02'


class AcctInfo(BaseModel):
    chAccAgeInd: Optional[ChAccAgeInd] = Field(
        None,
        description='Length of time that the cardholder has had the account with the 3DS Requestor. \nAllowed values:\n* **01** — No account\n* **02** — Created during this transaction\n* **03** — Less than 30 days\n* **04** — 30–60 days\n* **05** — More than 60 days',
    )
    chAccChange: Optional[str] = Field(
        None,
        description='Date that the cardholder’s account with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added. \nFormat: **YYYYMMDD**',
    )
    chAccChangeInd: Optional[ChAccChangeInd] = Field(
        None,
        description='Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added. \nAllowed values:\n* **01** — Changed during this transaction\n* **02** — Less than 30 days\n* **03** — 30–60 days\n* **04** — More than 60 days',
    )
    chAccPwChange: Optional[str] = Field(
        None,
        description='Date that cardholder’s account with the 3DS Requestor had a password change or account reset. \nFormat: **YYYYMMDD**',
    )
    chAccPwChangeInd: Optional[ChAccPwChangeInd] = Field(
        None,
        description='Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset. \nAllowed values:\n* **01** — No change\n* **02** — Changed during this transaction\n* **03** — Less than 30 days\n* **04** — 30–60 days\n* **05** — More than 60 days',
    )
    chAccString: Optional[str] = Field(
        None,
        description='Date that the cardholder opened the account with the 3DS Requestor. \nFormat: **YYYYMMDD**',
    )
    nbPurchaseAccount: Optional[str] = Field(
        None,
        description='Number of purchases with this cardholder account during the previous six months. Max length: 4 characters.',
    )
    paymentAccAge: Optional[str] = Field(
        None,
        description='String that the payment account was enrolled in the cardholder’s account with the 3DS Requestor. \nFormat: **YYYYMMDD**',
    )
    paymentAccInd: Optional[PaymentAccInd] = Field(
        None,
        description='Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor. \nAllowed values:\n* **01** — No account (guest checkout)\n* **02** — During this transaction\n* **03** — Less than 30 days\n* **04** — 30–60 days\n* **05** — More than 60 days',
    )
    provisionAttemptsDay: Optional[str] = Field(
        None,
        description='Number of Add Card attempts in the last 24 hours. Max length: 3 characters.',
    )
    shipAddressUsage: Optional[str] = Field(
        None,
        description='String when the shipping address used for this transaction was first used with the 3DS Requestor. \nFormat: **YYYYMMDD**',
    )
    shipAddressUsageInd: Optional[ShipAddressUsageInd] = Field(
        None,
        description='Indicates when the shipping address used for this transaction was first used with the 3DS Requestor. \nAllowed values:\n* **01** — This transaction\n* **02** — Less than 30 days\n* **03** — 30–60 days\n* **04** — More than 60 days',
    )
    shipNameIndicator: Optional[ShipNameIndicator] = Field(
        None,
        description='Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction. \nAllowed values:\n* **01** — Account Name identical to shipping Name\n* **02** — Account Name different to shipping Name',
    )
    suspiciousAccActivity: Optional[SuspiciousAccActivity] = Field(
        None,
        description='Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account. \nAllowed values:\n* **01** — No suspicious activity has been observed\n* **02** — Suspicious activity has been observed',
    )
    txnActivityDay: Optional[constr(max_length=3)] = Field(
        None,
        description='Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous 24 hours. Max length: 3 characters.',
    )
    txnActivityYear: Optional[constr(max_length=3)] = Field(
        None,
        description='Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous year. Max length: 3 characters.',
    )


class Type(Enum):
    ach = 'ach'
    ach_plaid = 'ach_plaid'


class AchDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bankAccountNumber: str = Field(
        ..., description='The bank account number (without separators).'
    )
    bankLocationId: Optional[str] = Field(
        None,
        description='The bank routing number of the account. The field value is `nil` in most cases.',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    encryptedBankAccountNumber: Optional[str] = Field(
        None,
        description='Encrypted bank account number. The bank account number (without separators).',
    )
    encryptedBankLocationId: Optional[str] = Field(
        None,
        description='Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.',
    )
    ownerName: Optional[str] = Field(
        None,
        description="The name of the bank account holder.\nIf you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n* χ12 is converted to ch12.\n* üA is converted to euA.\n* Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\nAfter replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n* John17 - allowed.\n* J17 - allowed.\n* 171 - not allowed.\n* John-7 - allowed.\n> If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.",
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type] = Field('ach', description='**ach**')


class ChallengeWindowSize(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'


class AdditionalData3DSecure(BaseModel):
    allow3DS2: Optional[str] = Field(
        None,
        description="Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).\n\n > This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the `executeThreeD` parameter.\n\nPossible values:\n* **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen still selects the version of 3D Secure based on configuration to optimize authorisation rates and improve the shopper's experience.\n* **false** – Not ready to support native 3D Secure 2 authentication. Adyen will not offer 3D Secure 2 to your shopper regardless of your configuration.\n",
    )
    challengeWindowSize: Optional[ChallengeWindowSize] = Field(
        None,
        description='Dimensions of the 3DS2 challenge window to be displayed to the cardholder.\n\nPossible values:\n\n* **01** - size of 250x400 \n* **02** - size of 390x400\n* **03** - size of 500x600\n* **04** - size of 600x400\n* **05** - Fullscreen',
    )
    executeThreeD: Optional[str] = Field(
        None,
        description="Indicates if you want to perform 3D Secure authentication on a transaction.\n\n > Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.\n\nPossible values:\n* **true** – Perform 3D Secure authentication.\n* **false** – Don't perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations. \n",
    )
    mpiImplementationType: Optional[str] = Field(
        None,
        description='In case of Secure+, this field must be set to **CUPSecurePlus**.',
    )
    scaExemption: Optional[str] = Field(
        None,
        description='Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.\n\n Possible values:\n* **lowValue** \n* **secureCorporate** \n* **trustedBeneficiary** \n* **transactionRiskAnalysis** ',
    )
    threeDSVersion: Optional[str] = Field(
        None,
        description="Indicates your preference for the 3D Secure version. \n> If you use this parameter, you override the checks from Adyen's Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.\n\nPossible values:\n* **1.0.2**: Apply 3D Secure version 1.0.2. \n* **2.1.0**: Apply 3D Secure version 2.1.0. \n* **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.\n\nThe following rules apply:\n* If you prefer 2.1.0 or 2.2.0 but we receive a negative `transStatus` in the `ARes`, we will apply the fallback policy configured in your account. For example, if the configuration is to fall back to 3D Secure 1, we will apply version 1.0.2.\n* If you prefer 2.1.0 or 2.2.0 but the BIN is not enrolled, you will receive an error.\n\n",
    )


class AdditionalDataAirline(BaseModel):
    airline_agency_invoice_number: Optional[str] = Field(
        None,
        alias='airline.agency_invoice_number',
        description='Reference number for the invoice, issued by the agency.\n* minLength: 1\n* maxLength: 6',
    )
    airline_agency_plan_name: Optional[str] = Field(
        None,
        alias='airline.agency_plan_name',
        description='2-letter agency plan identifier; alphabetical.\n* minLength: 2\n* maxLength: 2',
    )
    airline_airline_code: Optional[str] = Field(
        None,
        alias='airline.airline_code',
        description='[IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX); numeric. It identifies the carrier.\n* Format: IATA 3-digit accounting code (PAX)\n* Example: KLM = 074\n* minLength: 3\n* maxLength: 3',
    )
    airline_airline_designator_code: Optional[str] = Field(
        None,
        alias='airline.airline_designator_code',
        description='[IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.\n* Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter airline code\n* Example: KLM = KL\n* minLength: 2\n* maxLength: 2',
    )
    airline_boarding_fee: Optional[str] = Field(
        None,
        alias='airline.boarding_fee',
        description='Chargeable amount for boarding the plane.\nThe transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).\n* minLength: 1\n* maxLength: 18',
    )
    airline_computerized_reservation_system: Optional[str] = Field(
        None,
        alias='airline.computerized_reservation_system',
        description='The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket.\n* Format: alphanumeric.\n* minLength: 4\n* maxLength: 4',
    )
    airline_customer_reference_number: Optional[str] = Field(
        None,
        alias='airline.customer_reference_number',
        description='Reference number; alphanumeric.\n* minLength: 0\n* maxLength: 20',
    )
    airline_document_type: Optional[str] = Field(
        None,
        alias='airline.document_type',
        description='Optional 2-digit code; alphanumeric. It identifies the type of product of the transaction. The description of the code may appear on credit card statements.\n* Format: 2-digit code\n* Example: Passenger ticket = 01\n* minLength: 2\n* maxLength: 2',
    )
    airline_flight_date: Optional[str] = Field(
        None,
        alias='airline.flight_date',
        description='Flight departure date. Local time `(HH:mm)` is optional.\n* Date format: `yyyy-MM-dd`\n* Date and time format: `yyyy-MM-dd HH:mm`\n* minLength: 10\n* maxLength: 16',
    )
    airline_leg_carrier_code: Optional[str] = Field(
        None,
        alias='airline.leg.carrier_code',
        description='[IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier.\nThis field is required/mandatory if the airline data includes leg details.\n* Format: IATA 2-letter airline code\n* Example: KLM = KL\n* minLength: 2\n* maxLength: 2',
    )
    airline_leg_class_of_travel: Optional[str] = Field(
        None,
        alias='airline.leg.class_of_travel',
        description='1-letter travel class identifier; alphabetical. There is no standard; however, the following codes are used rather consistently:\n* F: first class\n* J: business class\n* Y: economy class\n* W: premium economy\n\nLimitations:\n* minLength: 1\n* maxLength: 1',
    )
    airline_leg_date_of_travel: Optional[str] = Field(
        None,
        alias='airline.leg.date_of_travel',
        description='\t\nDate and time of travel. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-compliant.\n* Format: `yyyy-MM-dd HH:mm`\n* minLength: 16\n* maxLength: 16',
    )
    airline_leg_depart_airport: Optional[str] = Field(
        None,
        alias='airline.leg.depart_airport',
        description='Alphabetical identifier of the departure airport.\nThis field is required if the airline data includes leg details.\n* Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.\n* Example: Amsterdam = AMS\n* minLength: 3\n* maxLength: 3',
    )
    airline_leg_depart_tax: Optional[str] = Field(
        None,
        alias='airline.leg.depart_tax',
        description='[Departure tax](https://en.wikipedia.org/wiki/Departure_tax). Amount charged by a country to an individual upon their leaving. The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).\n* minLength: 1\n* maxLength: 12',
    )
    airline_leg_destination_code: Optional[str] = Field(
        None,
        alias='airline.leg.destination_code',
        description='Alphabetical identifier of the destination/arrival airport.\nThis field is required/mandatory if the airline data includes leg details.\n* Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code.\n* Example: Amsterdam = AMS\n* minLength: 3\n* maxLength: 3',
    )
    airline_leg_fare_base_code: Optional[str] = Field(
        None,
        alias='airline.leg.fare_base_code',
        description='[Fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code); alphanumeric.\n* minLength: 1\n* maxLength: 7',
    )
    airline_leg_flight_number: Optional[str] = Field(
        None,
        alias='airline.leg.flight_number',
        description='The flight identifier.\n* minLength: 1\n* maxLength: 5',
    )
    airline_leg_stop_over_code: Optional[str] = Field(
        None,
        alias='airline.leg.stop_over_code',
        description='1-letter code that indicates whether the passenger is entitled to make a stopover. Only two types of characters are allowed:\n* O: Stopover allowed\n* X: Stopover not allowed\n\nLimitations:\n* minLength: 1\n* maxLength: 1',
    )
    airline_passenger_date_of_birth: Optional[str] = Field(
        None,
        alias='airline.passenger.date_of_birth',
        description='Date of birth of the passenger.\n\nDate format: `yyyy-MM-dd`\n* minLength: 10\n* maxLength: 10',
    )
    airline_passenger_first_name: Optional[str] = Field(
        None,
        alias='airline.passenger.first_name',
        description='Passenger first name/given name.\n> This field is required/mandatory if the airline data includes passenger details or leg details.',
    )
    airline_passenger_last_name: Optional[str] = Field(
        None,
        alias='airline.passenger.last_name',
        description='Passenger last name/family name.\n> This field is required/mandatory if the airline data includes passenger details or leg details.',
    )
    airline_passenger_telephone_number: Optional[str] = Field(
        None,
        alias='airline.passenger.telephone_number',
        description="Telephone number of the passenger, including country code. This is an alphanumeric field that can include the '+' and '-' signs.\n* minLength: 3\n* maxLength: 30",
    )
    airline_passenger_traveller_type: Optional[str] = Field(
        None,
        alias='airline.passenger.traveller_type',
        description='Passenger type code (PTC). IATA PTC values are 3-letter alphabetical. Example: ADT, SRC, CNN, INS.\n\nHowever, several carriers use non-standard codes that can be up to 5 alphanumeric characters.\n* minLength: 3\n* maxLength: 6',
    )
    airline_passenger_name: str = Field(
        ...,
        alias='airline.passenger_name',
        description='Passenger name, initials, and a title.\n* Format: last name + first name or initials + title.\n* Example: *FLYER / MARY MS*.\n* minLength: 1\n* maxLength: 49',
    )
    airline_ticket_issue_address: Optional[str] = Field(
        None,
        alias='airline.ticket_issue_address',
        description='Address of the place/agency that issued the ticket.\n* minLength: 0\n* maxLength: 16',
    )
    airline_ticket_number: Optional[str] = Field(
        None,
        alias='airline.ticket_number',
        description="The ticket's unique identifier.\n* minLength: 1\n* maxLength: 150",
    )
    airline_travel_agency_code: Optional[str] = Field(
        None,
        alias='airline.travel_agency_code',
        description='IATA number, also ARC number or ARC/IATA number. Unique identifier number for travel agencies.\n* minLength: 1\n* maxLength: 8',
    )
    airline_travel_agency_name: Optional[str] = Field(
        None,
        alias='airline.travel_agency_name',
        description='The name of the travel agency.\n* minLength: 1\n* maxLength: 25',
    )


class AdditionalDataCarRental(BaseModel):
    carRental_checkOutDate: Optional[str] = Field(
        None,
        alias='carRental.checkOutDate',
        description='Pick-up date.\n* Date format: `yyyyMMdd`',
    )
    carRental_customerServiceTollFreeNumber: Optional[str] = Field(
        None,
        alias='carRental.customerServiceTollFreeNumber',
        description='The customer service phone number of the car rental company.\n* Format: Alphanumeric\n* maxLength: 17',
    )
    carRental_daysRented: Optional[str] = Field(
        None,
        alias='carRental.daysRented',
        description='Number of days for which the car is being rented.\n* Format: Numeric\n* maxLength: 19',
    )
    carRental_fuelCharges: Optional[str] = Field(
        None,
        alias='carRental.fuelCharges',
        description='Any fuel charges associated with the rental.\n* Format: Numeric\n* maxLength: 12',
    )
    carRental_insuranceCharges: Optional[str] = Field(
        None,
        alias='carRental.insuranceCharges',
        description='Any insurance charges associated with the rental.\n* Format: Numeric\n* maxLength: 12',
    )
    carRental_locationCity: Optional[str] = Field(
        None,
        alias='carRental.locationCity',
        description='The city from which the car is rented.\n* Format: Alphanumeric\n* maxLength: 18',
    )
    carRental_locationCountry: Optional[str] = Field(
        None,
        alias='carRental.locationCountry',
        description='The country from which the car is rented.\n* Format: Alphanumeric\n* maxLength: 2',
    )
    carRental_locationStateProvince: Optional[str] = Field(
        None,
        alias='carRental.locationStateProvince',
        description='The state or province from where the car is rented.\n* Format: Alphanumeric\n* maxLength: 3',
    )
    carRental_noShowIndicator: Optional[str] = Field(
        None,
        alias='carRental.noShowIndicator',
        description='Indicates if the customer was a "no-show" (neither keeps nor cancels their booking).\n* Y - Customer was a no show.\n* N - Not applicable.',
    )
    carRental_oneWayDropOffCharges: Optional[str] = Field(
        None,
        alias='carRental.oneWayDropOffCharges',
        description='Charge associated with not returning a vehicle to the original rental location.',
    )
    carRental_rate: Optional[str] = Field(
        None,
        alias='carRental.rate',
        description='Daily rental rate.\n* Format: Alphanumeric\n* maxLength: 12',
    )
    carRental_rateIndicator: Optional[str] = Field(
        None,
        alias='carRental.rateIndicator',
        description='Specifies whether the given rate is applied daily or weekly.\n* D - Daily rate.\n* W - Weekly rate.',
    )
    carRental_rentalAgreementNumber: Optional[str] = Field(
        None,
        alias='carRental.rentalAgreementNumber',
        description='The rental agreement number associated with this car rental.\n* Format: Alphanumeric\n* maxLength: 9',
    )
    carRental_rentalClassId: Optional[str] = Field(
        None,
        alias='carRental.rentalClassId',
        description='Daily rental rate.\n* Format: Alphanumeric\n* maxLength: 12',
    )
    carRental_renterName: Optional[str] = Field(
        None,
        alias='carRental.renterName',
        description='The name of the person renting the car.\n* Format: Alphanumeric\n* maxLength: 26',
    )
    carRental_returnCity: Optional[str] = Field(
        None,
        alias='carRental.returnCity',
        description='The city where the car must be returned.\n* Format: Alphanumeric\n* maxLength: 18',
    )
    carRental_returnCountry: Optional[str] = Field(
        None,
        alias='carRental.returnCountry',
        description='The country where the car must be returned.\n* Format: Alphanumeric\n* maxLength: 2',
    )
    carRental_returnDate: Optional[str] = Field(
        None,
        alias='carRental.returnDate',
        description='The last date to return the car by.\n* Date format: `yyyyMMdd`',
    )
    carRental_returnLocationId: Optional[str] = Field(
        None,
        alias='carRental.returnLocationId',
        description='Agency code, phone number, or address abbreviation\n* Format: Alphanumeric\n* maxLength: 10',
    )
    carRental_returnStateProvince: Optional[str] = Field(
        None,
        alias='carRental.returnStateProvince',
        description='The state or province where the car must be returned.\n* Format: Alphanumeric\n* maxLength: 3',
    )
    carRental_taxExemptIndicator: Optional[str] = Field(
        None,
        alias='carRental.taxExemptIndicator',
        description='Indicates whether the goods or services were tax-exempt, or tax was not collected.\n\nValues:\n* Y - Goods or services were tax exempt\n* N - Tax was not collected',
    )
    travelEntertainmentAuthData_duration: Optional[str] = Field(
        None,
        alias='travelEntertainmentAuthData.duration',
        description='Number of nights.  This should be included in the auth message.\n* Format: Numeric\n* maxLength: 2',
    )
    travelEntertainmentAuthData_market: Optional[str] = Field(
        None,
        alias='travelEntertainmentAuthData.market',
        description='Indicates what market-specific dataset will be submitted or is being submitted. Value should be "A" for Car rental. This should be included in the auth message.\n* Format: Alphanumeric\n* maxLength: 1',
    )


class IndustryUsage(Enum):
    NoShow = 'NoShow'
    DelayedCharge = 'DelayedCharge'


class AdditionalDataCommon(BaseModel):
    RequestedTestErrorResponseCode: Optional[str] = Field(
        None,
        description="Triggers test scenarios that allow to replicate certain communication errors.\n\nAllowed values:\n* **NO_CONNECTION_AVAILABLE** – There wasn't a connection available to service the outgoing communication.\nThis is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request.\n* **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response.\nThis is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.",
    )
    allowPartialAuth: Optional[str] = Field(
        None,
        description='Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account. \nIf a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue.\nTo enable this functionality, contact our Support Team.',
    )
    authorisationType: Optional[str] = Field(
        None,
        description='Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).\n\nAllowed values:\n* **PreAuth** – flags the payment request to be handled as a pre-authorisation.\n* **FinalAuth** – flags the payment request to be handled as a final authorisation.',
    )
    customRoutingFlag: Optional[str] = Field(
        None,
        description="Allows you to determine or override the acquirer account that should be used for the transaction.\n\nIf you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request's additional data to target a specific acquirer.\n\nTo enable this functionality, contact [Support](https://www.adyen.help/hc/en-us/requests/new).",
    )
    industryUsage: Optional[IndustryUsage] = Field(
        None,
        description='In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.\n\nPossible values:\n\n * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.\n\n * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.',
    )
    manualCapture: Optional[str] = Field(
        None,
        description='Set to **true** to require [manual capture](https://docs.adyen.com/online-payments/capture) for the transaction.',
    )
    networkTxReference: Optional[str] = Field(
        None,
        description='Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.\n\nTransaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.\n\nSubmit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.\n\nMake sure you are sending `shopperInteraction` **ContAuth** and `recurringProcessingModel` **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT.',
    )
    overwriteBrand: Optional[str] = Field(
        None,
        description='Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the `selectedBrand` value to specify how to process the transaction.',
    )
    subMerchantCity: Optional[str] = Field(
        None,
        description="This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 13 characters.",
    )
    subMerchantCountry: Optional[str] = Field(
        None,
        description="This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant's address.\n* Format: alpha-numeric.\n* Fixed length: 3 characters.",
    )
    subMerchantID: Optional[str] = Field(
        None,
        description='This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.\n\nA unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator.\n* Format: alpha-numeric.\n* Fixed length: 15 characters.',
    )
    subMerchantName: Optional[str] = Field(
        None,
        description='This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant.\n* Format: alpha-numeric.\n* Maximum length: 22 characters.',
    )
    subMerchantPostalCode: Optional[str] = Field(
        None,
        description="This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 10 characters.",
    )
    subMerchantState: Optional[str] = Field(
        None,
        description="This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 3 characters.",
    )
    subMerchantStreet: Optional[str] = Field(
        None,
        description="This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 60 characters.",
    )
    subMerchantTaxId: Optional[str] = Field(
        None,
        description='This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant.\n* Format: alpha-numeric.\n* Fixed length: 11 or 14 characters.',
    )


class AdditionalDataLevel23(BaseModel):
    enhancedSchemeData_customerReference: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.customerReference',
        description='Customer code, if supplied by a customer.\n\nEncoding: ASCII.\n\nMax length: 25 characters.\n\n> Required for Level 2 and Level 3 data.',
    )
    enhancedSchemeData_destinationCountryCode: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.destinationCountryCode',
        description='Destination country code.\n\nEncoding: ASCII.\n\nMax length: 3 characters.',
    )
    enhancedSchemeData_destinationPostalCode: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.destinationPostalCode',
        description='The postal code of a destination address.\n\nEncoding: ASCII.\n\nMax length: 10 characters.\n\n> Required for American Express.',
    )
    enhancedSchemeData_destinationStateProvinceCode: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.destinationStateProvinceCode',
        description='Destination state or province code.\n\nEncoding: ASCII.Max length: 3 characters.',
    )
    enhancedSchemeData_dutyAmount: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.dutyAmount',
        description='Duty amount, in minor units.\n\nFor example, 2000 means USD 20.00.\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_freightAmount: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.freightAmount',
        description='Shipping amount, in minor units.\n\nFor example, 2000 means USD 20.00.\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__commodityCode: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].commodityCode',
        description='Item commodity code.\n\nEncoding: ASCII.\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__description: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].description',
        description='Item description.\n\nEncoding: ASCII.\n\nMax length: 26 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__discountAmount: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].discountAmount',
        description='Discount amount, in minor units.\n\nFor example, 2000 means USD 20.00.\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__productCode: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].productCode',
        description='Product code.\n\nEncoding: ASCII.\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__quantity: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].quantity',
        description='Quantity, specified as an integer value.\n\nValue must be greater than 0.\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__totalAmount: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].totalAmount',
        description='Total amount, in minor units.\n\nFor example, 2000 means USD 20.00.\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__unitOfMeasure: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure',
        description='Item unit of measurement.\n\nEncoding: ASCII.\n\nMax length: 3 characters.',
    )
    enhancedSchemeData_itemDetailLine_itemNr__unitPrice: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.itemDetailLine[itemNr].unitPrice',
        description='Unit price, specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n\nMax length: 12 characters.',
    )
    enhancedSchemeData_orderDate: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.orderDate',
        description='Order date.\n* Format: `ddMMyy`\n\nEncoding: ASCII.\n\nMax length: 6 characters.',
    )
    enhancedSchemeData_shipFromPostalCode: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.shipFromPostalCode',
        description='The postal code of a "ship-from" address.\n\nEncoding: ASCII.\n\nMax length: 10 characters.',
    )
    enhancedSchemeData_totalTaxAmount: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.totalTaxAmount',
        description='Total tax amount, in minor units.\n\nFor example, 2000 means USD 20.00.\n\nMax length: 12 characters.\n\n> Required for Level 2 and Level 3 data.',
    )


class AdditionalDataLodging(BaseModel):
    lodging_checkInDate: Optional[str] = Field(
        None,
        alias='lodging.checkInDate',
        description='The arrival date.\n* Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.',
    )
    lodging_checkOutDate: Optional[str] = Field(
        None,
        alias='lodging.checkOutDate',
        description='The departure date.\n* Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**.',
    )
    lodging_customerServiceTollFreeNumber: Optional[str] = Field(
        None,
        alias='lodging.customerServiceTollFreeNumber',
        description='The toll-free phone number for the lodging.\n* Format: alphanumeric.\n* Max length: 17 characters.\n* For US numbers: must start with 3 digits and be at least 10 characters in length. Otherwise, the capture can fail.',
    )
    lodging_fireSafetyActIndicator: Optional[str] = Field(
        None,
        alias='lodging.fireSafetyActIndicator',
        description="Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Values can be: 'Y' or 'N'.\n* Format: alphabetic.\n* Max length: 1 character.",
    )
    lodging_folioCashAdvances: Optional[str] = Field(
        None,
        alias='lodging.folioCashAdvances',
        description='The folio cash advances.\n* Format: numeric.\n* Max length: 12 characters.',
    )
    lodging_folioNumber: Optional[str] = Field(
        None,
        alias='lodging.folioNumber',
        description='The card acceptor’s internal invoice or billing ID reference number.\n* Format: alphanumeric.\n* Max length: 25 characters.',
    )
    lodging_foodBeverageCharges: Optional[str] = Field(
        None,
        alias='lodging.foodBeverageCharges',
        description='The additional charges for food and beverages associated with the booking.\n* Format: numeric.\n* Max length: 12 characters.',
    )
    lodging_noShowIndicator: Optional[str] = Field(
        None,
        alias='lodging.noShowIndicator',
        description="Indicates if the customer didn't check in for their booking.\n Possible values: \n * **Y**: the customer didn't check in. \n **N**: the customer checked in.",
    )
    lodging_prepaidExpenses: Optional[str] = Field(
        None,
        alias='lodging.prepaidExpenses',
        description='The prepaid expenses for the booking.\n* Format: numeric.\n* Max length: 12 characters.',
    )
    lodging_propertyPhoneNumber: Optional[str] = Field(
        None,
        alias='lodging.propertyPhoneNumber',
        description='Identifies the location of the lodging by its local phone number.\n* Format: alphanumeric.\n* Max length: 17 characters.\n* For US numbers: must start with 3 digits and be at least 10 characters in length. Otherwise, the capture can fail.',
    )
    lodging_room1_numberOfNights: Optional[str] = Field(
        None,
        alias='lodging.room1.numberOfNights',
        description='The total number of nights the room is booked for.\n* Format: numeric.\n* Max length: 4 characters.',
    )
    lodging_room1_rate: Optional[str] = Field(
        None,
        alias='lodging.room1.rate',
        description='The rate of the room.\n* Format: numeric.\n* Max length: 12 characters.\n* Must be in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )
    lodging_room1_tax: Optional[str] = Field(
        None,
        alias='lodging.room1.tax',
        description='The total amount of tax to be paid.\n* Format: numeric.\n* Max length: 12 chracters.\n* Must be in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )
    lodging_totalRoomTax: Optional[str] = Field(
        None,
        alias='lodging.totalRoomTax',
        description='The total room tax amount.\n* Format: numeric.\n* Max length: 12 characters.\n* Must be in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )
    lodging_totalTax: Optional[str] = Field(
        None,
        alias='lodging.totalTax',
        description='The total tax amount.\n* Format: numeric.\n* Max length: 12 characters.\n* Must be in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )
    travelEntertainmentAuthData_duration: Optional[str] = Field(
        None,
        alias='travelEntertainmentAuthData.duration',
        description='The number of nights. This should be included in the auth message.\n* Format: numeric.\n* Max length: 2 characters.',
    )
    travelEntertainmentAuthData_market: Optional[str] = Field(
        None,
        alias='travelEntertainmentAuthData.market',
        description='Indicates what market-specific dataset will be submitted or is being submitted. Value should be "H" for Hotel. This should be included in the auth message.\n\n* Format: alphanumeric.\n* Max length: 1 character.',
    )


class AdditionalDataOpenInvoice(BaseModel):
    openinvoicedata_merchantData: Optional[str] = Field(
        None,
        alias='openinvoicedata.merchantData',
        description="Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.\n\nThe `merchantData` parameter needs to be added to the `openinvoicedata` signature at the end.\n\nSince the field is optional, if it's not included it does not impact computing the merchant signature.\n\nApplies only to Klarna.\n\nYou can contact Klarna for the format and structure of the string.",
    )
    openinvoicedata_numberOfLines: Optional[str] = Field(
        None,
        alias='openinvoicedata.numberOfLines',
        description='The number of invoice lines included in `openinvoicedata`.\n\nThere needs to be at least one line, so `numberOfLines` needs to be at least 1.',
    )
    openinvoicedata_recipientFirstName: Optional[str] = Field(
        None,
        alias='openinvoicedata.recipientFirstName',
        description='First name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.',
    )
    openinvoicedata_recipientLastName: Optional[str] = Field(
        None,
        alias='openinvoicedata.recipientLastName',
        description='Last name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.',
    )
    openinvoicedataLine_itemNr__currencyCode: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].currencyCode',
        description='The three-character ISO currency code.',
    )
    openinvoicedataLine_itemNr__description: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].description',
        description='A text description of the product the invoice line refers to.',
    )
    openinvoicedataLine_itemNr__itemAmount: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].itemAmount',
        description='The price for one item in the invoice line, represented in minor units.\n\nThe due amount for the item, VAT excluded.',
    )
    openinvoicedataLine_itemNr__itemId: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].itemId',
        description='A unique id for this item. Required for RatePay if the description of each item is not unique.',
    )
    openinvoicedataLine_itemNr__itemVatAmount: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].itemVatAmount',
        description='The VAT due for one item in the invoice line, represented in minor units.',
    )
    openinvoicedataLine_itemNr__itemVatPercentage: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].itemVatPercentage',
        description='The VAT percentage for one item in the invoice line, represented in minor units.\n\nFor example, 19% VAT is specified as 1900.',
    )
    openinvoicedataLine_itemNr__numberOfItems: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].numberOfItems',
        description='The number of units purchased of a specific product.',
    )
    openinvoicedataLine_itemNr__returnShippingCompany: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].returnShippingCompany',
        description='Name of the shipping company handling the the return shipment.',
    )
    openinvoicedataLine_itemNr__returnTrackingNumber: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].returnTrackingNumber',
        description='The tracking number for the return of the shipment.',
    )
    openinvoicedataLine_itemNr__returnTrackingUri: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].returnTrackingUri',
        description='URI where the customer can track the return of their shipment.',
    )
    openinvoicedataLine_itemNr__shippingCompany: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].shippingCompany',
        description='Name of the shipping company handling the delivery.',
    )
    openinvoicedataLine_itemNr__shippingMethod: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].shippingMethod',
        description='Shipping method.',
    )
    openinvoicedataLine_itemNr__trackingNumber: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].trackingNumber',
        description='The tracking number for the shipment.',
    )
    openinvoicedataLine_itemNr__trackingUri: Optional[str] = Field(
        None,
        alias='openinvoicedataLine[itemNr].trackingUri',
        description='URI where the customer can track their shipment.',
    )


class AdditionalDataOpi(BaseModel):
    opi_includeTransToken: Optional[str] = Field(
        None,
        alias='opi.includeTransToken',
        description='Optional boolean indicator. Set to **true** if you want an ecommerce transaction to return an `opi.transToken` as additional data in the response.\n\nYou can store this Oracle Payment Interface token in your Oracle Opera database. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).',
    )


class AdditionalDataRatepay(BaseModel):
    ratepay_installmentAmount: Optional[str] = Field(
        None,
        alias='ratepay.installmentAmount',
        description='Amount the customer has to pay each month.',
    )
    ratepay_interestRate: Optional[str] = Field(
        None,
        alias='ratepay.interestRate',
        description='Interest rate of this installment.',
    )
    ratepay_lastInstallmentAmount: Optional[str] = Field(
        None,
        alias='ratepay.lastInstallmentAmount',
        description='Amount of the last installment.',
    )
    ratepay_paymentFirstday: Optional[str] = Field(
        None,
        alias='ratepay.paymentFirstday',
        description='Calendar day of the first payment.',
    )
    ratepaydata_deliveryDate: Optional[str] = Field(
        None,
        alias='ratepaydata.deliveryDate',
        description='Date the merchant delivered the goods to the customer.',
    )
    ratepaydata_dueDate: Optional[str] = Field(
        None,
        alias='ratepaydata.dueDate',
        description='Date by which the customer must settle the payment.',
    )
    ratepaydata_invoiceDate: Optional[str] = Field(
        None,
        alias='ratepaydata.invoiceDate',
        description='Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.',
    )
    ratepaydata_invoiceId: Optional[str] = Field(
        None,
        alias='ratepaydata.invoiceId',
        description='Identification name or number for the invoice, defined by the merchant.',
    )


class AdditionalDataRetry(BaseModel):
    retry_chainAttemptNumber: Optional[str] = Field(
        None,
        alias='retry.chainAttemptNumber',
        description='The number of times the transaction (not order) has been retried between different payment service providers. For instance, the `chainAttemptNumber` set to 2 means that this transaction has been recently tried on another provider before being sent to Adyen.\n\n> If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.',
    )
    retry_orderAttemptNumber: Optional[str] = Field(
        None,
        alias='retry.orderAttemptNumber',
        description='The index of the attempt to bill a particular order, which is identified by the `merchantOrderReference` field. For example, if a recurring transaction fails and is retried one day later, then the order number for these attempts would be 1 and 2, respectively.\n\n> If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.',
    )
    retry_skipRetry: Optional[str] = Field(
        None,
        alias='retry.skipRetry',
        description='The Boolean value indicating whether Adyen should skip or retry this transaction, if possible.\n\n> If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together.',
    )


class AdditionalDataRisk(BaseModel):
    riskdata__customFieldName_: Optional[str] = Field(
        None,
        alias='riskdata.[customFieldName]',
        description='The data for your custom risk field. For more information, refer to [Create custom risk fields](https://docs.adyen.com/risk-management/configure-custom-risk-rules#step-1-create-custom-risk-fields).',
    )
    riskdata_basket_item_itemNr__amountPerItem: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].amountPerItem',
        description='The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )
    riskdata_basket_item_itemNr__brand: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].brand',
        description='Brand of the item.',
    )
    riskdata_basket_item_itemNr__category: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].category',
        description='Category of the item.',
    )
    riskdata_basket_item_itemNr__color: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].color',
        description='Color of the item.',
    )
    riskdata_basket_item_itemNr__currency: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].currency',
        description='The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).',
    )
    riskdata_basket_item_itemNr__itemID: Optional[str] = Field(
        None, alias='riskdata.basket.item[itemNr].itemID', description='ID of the item.'
    )
    riskdata_basket_item_itemNr__manufacturer: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].manufacturer',
        description='Manufacturer of the item.',
    )
    riskdata_basket_item_itemNr__productTitle: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].productTitle',
        description='A text description of the product the invoice line refers to.',
    )
    riskdata_basket_item_itemNr__quantity: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].quantity',
        description='Quantity of the item purchased.',
    )
    riskdata_basket_item_itemNr__receiverEmail: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].receiverEmail',
        description='Email associated with the given product in the basket (usually in electronic gift cards).',
    )
    riskdata_basket_item_itemNr__size: Optional[str] = Field(
        None, alias='riskdata.basket.item[itemNr].size', description='Size of the item.'
    )
    riskdata_basket_item_itemNr__sku: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].sku',
        description='[Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit).',
    )
    riskdata_basket_item_itemNr__upc: Optional[str] = Field(
        None,
        alias='riskdata.basket.item[itemNr].upc',
        description='[Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code).',
    )
    riskdata_promotions_promotion_itemNr__promotionCode: Optional[str] = Field(
        None,
        alias='riskdata.promotions.promotion[itemNr].promotionCode',
        description='Code of the promotion.',
    )
    riskdata_promotions_promotion_itemNr__promotionDiscountAmount: Optional[str] = (
        Field(
            None,
            alias='riskdata.promotions.promotion[itemNr].promotionDiscountAmount',
            description='The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
        )
    )
    riskdata_promotions_promotion_itemNr__promotionDiscountCurrency: Optional[str] = (
        Field(
            None,
            alias='riskdata.promotions.promotion[itemNr].promotionDiscountCurrency',
            description='The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).',
        )
    )
    riskdata_promotions_promotion_itemNr__promotionDiscountPercentage: Optional[str] = (
        Field(
            None,
            alias='riskdata.promotions.promotion[itemNr].promotionDiscountPercentage',
            description="Promotion's percentage discount. It is represented in percentage value and there is no need to include the '%' sign.\n\ne.g. for a promotion discount of 30%, the value of the field should be 30.",
        )
    )
    riskdata_promotions_promotion_itemNr__promotionName: Optional[str] = Field(
        None,
        alias='riskdata.promotions.promotion[itemNr].promotionName',
        description='Name of the promotion.',
    )
    riskdata_riskProfileReference: Optional[str] = Field(
        None,
        alias='riskdata.riskProfileReference',
        description="Reference number of the risk profile that you want to apply to the payment. If not provided or left blank, the merchant-level account's default risk profile will be applied to the payment. For more information, see [dynamically assign a risk profile to a payment](https://docs.adyen.com/risk-management/create-and-use-risk-profiles#dynamically-assign-a-risk-profile-to-a-payment).",
    )
    riskdata_skipRisk: Optional[str] = Field(
        None,
        alias='riskdata.skipRisk',
        description='If this parameter is provided with the value **true**, risk checks for the payment request are skipped and the transaction will not get a risk score.',
    )


class AdditionalDataRiskStandalone(BaseModel):
    PayPal_CountryCode: Optional[str] = Field(
        None,
        alias='PayPal.CountryCode',
        description="Shopper's country of residence in the form of ISO standard 3166 2-character country codes.",
    )
    PayPal_EmailId: Optional[str] = Field(
        None, alias='PayPal.EmailId', description="Shopper's email."
    )
    PayPal_FirstName: Optional[str] = Field(
        None, alias='PayPal.FirstName', description="Shopper's first name."
    )
    PayPal_LastName: Optional[str] = Field(
        None, alias='PayPal.LastName', description="Shopper's last name."
    )
    PayPal_PayerId: Optional[str] = Field(
        None,
        alias='PayPal.PayerId',
        description='Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters.',
    )
    PayPal_Phone: Optional[str] = Field(
        None, alias='PayPal.Phone', description="Shopper's phone number."
    )
    PayPal_ProtectionEligibility: Optional[str] = Field(
        None,
        alias='PayPal.ProtectionEligibility',
        description="Allowed values:\n* **Eligible** — Merchant is protected by PayPal's Seller Protection Policy for Unauthorized Payments and Item Not Received.\n\n* **PartiallyEligible** — Merchant is protected by PayPal's Seller Protection Policy for Item Not Received.\n\n* **Ineligible** — Merchant is not protected under the Seller Protection Policy.",
    )
    PayPal_TransactionId: Optional[str] = Field(
        None,
        alias='PayPal.TransactionId',
        description='Unique transaction ID of the payment.',
    )
    avsResultRaw: Optional[str] = Field(
        None,
        description='Raw AVS result received from the acquirer, where available. Example: D',
    )
    bin: Optional[str] = Field(
        None,
        description='The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](https://docs.adyen.com/risk-management/standalone-risk#tokenised-pan-request).',
    )
    cvcResultRaw: Optional[str] = Field(
        None,
        description='Raw CVC result received from the acquirer, where available. Example: 1',
    )
    riskToken: Optional[str] = Field(
        None, description="Unique identifier or token for the shopper's card details."
    )
    threeDAuthenticated: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true',
    )
    threeDOffered: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether 3DS was offered for this payment. Example: true',
    )
    tokenDataType: Optional[str] = Field(
        None,
        description='Required for PayPal payments only. The only supported value is: **paypal**.',
    )


class AdditionalDataSubMerchant(BaseModel):
    subMerchant_numberOfSubSellers: Optional[str] = Field(
        None,
        alias='subMerchant.numberOfSubSellers',
        description='Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.',
    )
    subMerchant_subSeller_subSellerNr__city: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].city',
        description="Required for transactions performed by registered payment facilitators. The city of the sub-merchant's address.\n* Format: Alphanumeric\n* Maximum length: 13 characters",
    )
    subMerchant_subSeller_subSellerNr__country: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].country',
        description="Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil. \n* Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)\n* Fixed length: 3 characters",
    )
    subMerchant_subSeller_subSellerNr__id: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].id',
        description='Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant. \n* Format: Alphanumeric\n* Maximum length: 15 characters',
    )
    subMerchant_subSeller_subSellerNr__mcc: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].mcc',
        description="Required for transactions performed by registered payment facilitators. The sub-merchant's 4-digit Merchant Category Code (MCC). \n* Format: Numeric\n* Fixed length: 4 digits",
    )
    subMerchant_subSeller_subSellerNr__name: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].name',
        description='Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement.\n* Format: Alphanumeric\n* Maximum length: 22 characters',
    )
    subMerchant_subSeller_subSellerNr__postalCode: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].postalCode',
        description="Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant's address, without dashes.\n* Format: Numeric\n* Fixed length: 8 digits",
    )
    subMerchant_subSeller_subSellerNr__state: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].state',
        description="Required for transactions performed by registered payment facilitators. The state code of the sub-merchant's address, if applicable to the country.\n* Format: Alphanumeric\n* Maximum length: 2 characters",
    )
    subMerchant_subSeller_subSellerNr__street: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].street',
        description="Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant's address.\n* Format: Alphanumeric\n* Maximum length: 60 characters",
    )
    subMerchant_subSeller_subSellerNr__taxId: Optional[str] = Field(
        None,
        alias='subMerchant.subSeller[subSellerNr].taxId',
        description='Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant.\n* Format: Numeric\n* Fixed length: 11 digits for the CPF or 14 digits for the CNPJ',
    )


class AdditionalDataTemporaryServices(BaseModel):
    enhancedSchemeData_customerReference: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.customerReference',
        description='Customer code, if supplied by a customer.\n* Encoding: ASCII\n* maxLength: 25',
    )
    enhancedSchemeData_employeeName: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.employeeName',
        description='Name or ID associated with the individual working in a temporary capacity.\n* maxLength: 40',
    )
    enhancedSchemeData_jobDescription: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.jobDescription',
        description='Description of the job or task of the individual working in a temporary capacity.\n* maxLength: 40',
    )
    enhancedSchemeData_regularHoursRate: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.regularHoursRate',
        description='Amount paid per regular hours worked, minor units.\n* maxLength: 7',
    )
    enhancedSchemeData_regularHoursWorked: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.regularHoursWorked',
        description='Amount of time worked during a normal operation for the task or job.\n* maxLength: 7',
    )
    enhancedSchemeData_requestName: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.requestName',
        description='Name of the individual requesting temporary services.\n* maxLength: 40',
    )
    enhancedSchemeData_tempStartDate: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.tempStartDate',
        description='Date for the beginning of the pay period.\n* Format: ddMMyy\n* maxLength: 6',
    )
    enhancedSchemeData_tempWeekEnding: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.tempWeekEnding',
        description='Date of the end of the billing cycle.\n* Format: ddMMyy\n* maxLength: 6',
    )
    enhancedSchemeData_totalTaxAmount: Optional[str] = Field(
        None,
        alias='enhancedSchemeData.totalTaxAmount',
        description='Total tax amount, in minor units. For example, 2000 means USD 20.00\n* maxLength: 12',
    )


class AdditionalDataWallets(BaseModel):
    androidpay_token: Optional[str] = Field(
        None,
        alias='androidpay.token',
        description='The Android Pay token retrieved from the SDK.',
    )
    masterpass_transactionId: Optional[str] = Field(
        None,
        alias='masterpass.transactionId',
        description='The Mastercard Masterpass Transaction ID retrieved from the SDK.',
    )
    payment_token: Optional[str] = Field(
        None,
        alias='payment.token',
        description='The Apple Pay token retrieved from the SDK.',
    )
    paywithgoogle_token: Optional[str] = Field(
        None,
        alias='paywithgoogle.token',
        description='The Google Pay token retrieved from the SDK.',
    )
    samsungpay_token: Optional[str] = Field(
        None,
        alias='samsungpay.token',
        description='The Samsung Pay token retrieved from the SDK.',
    )
    visacheckout_callId: Optional[str] = Field(
        None,
        alias='visacheckout.callId',
        description='The Visa Checkout Call ID retrieved from the SDK.',
    )


class Address(BaseModel):
    city: constr(max_length=3000) = Field(
        ..., description='The name of the city. Maximum length: 3000 characters.'
    )
    country: str = Field(
        ...,
        description="The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
    )
    houseNumberOrName: constr(max_length=3000) = Field(
        ...,
        description='The number or name of the house. Maximum length: 3000 characters.',
    )
    postalCode: str = Field(
        ...,
        description='A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.',
    )
    street: constr(max_length=3000) = Field(
        ...,
        description='The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.',
    )


class Type1(Enum):
    afterpay_default = 'afterpay_default'
    afterpaytouch = 'afterpaytouch'
    afterpay_b2b = 'afterpay_b2b'


class AfterpayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    billingAddress: Optional[str] = Field(
        None, description='The address where to send the invoice.'
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    deliveryAddress: Optional[str] = Field(
        None, description='The address where the goods should be delivered.'
    )
    personalDetails: Optional[str] = Field(
        None,
        description='Shopper name, date of birth, phone number, and email address.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Type1 = Field(..., description='**afterpay_default**')


class Type2(Enum):
    amazonpay = 'amazonpay'


class AmazonPayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    amazonPayToken: Optional[str] = Field(
        None,
        description='This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response.',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    type: Optional[Type2] = Field('amazonpay', description='**amazonpay**')


class Amount(BaseModel):
    currency: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    value: int = Field(
        ...,
        description='The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )


class Type3(Enum):
    androidpay = 'androidpay'


class AndroidPayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    type: Optional[Type3] = Field('androidpay', description='**androidpay**')


class FundingSource(Enum):
    debit = 'debit'


class Type4(Enum):
    applepay = 'applepay'


class ApplePayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    applePayToken: constr(max_length=10000) = Field(
        ...,
        description='The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None,
        description='The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type4] = Field('applepay', description='**applepay**')


class ApplePaySessionResponse(BaseModel):
    data: str = Field(
        ...,
        description='Base64 encoded data you need to [complete the Apple Pay merchant validation](https://docs.adyen.com/payment-methods/apple-pay/api-only?tab=adyen-certificate-validation_1#complete-apple-pay-session-validation).',
    )


class AttemptAuthentication(Enum):
    always = 'always'
    never = 'never'


class Enabled(Enum):
    yes = 'yes'
    no = 'no'
    automatic = 'automatic'


class Avs(BaseModel):
    addressEditable: Optional[bool] = Field(
        None,
        description='Indicates whether the shopper is allowed to modify the billing address for the current payment request.',
    )
    enabled: Optional[Enabled] = Field(
        None,
        description='Specifies whether the shopper should enter their billing address during checkout.\n\nAllowed values:\n* yes — Perform AVS checks for every card payment.\n* automatic — Perform AVS checks only when required to optimize the conversion rate.\n* no — Do not perform AVS checks.',
    )


class Type5(Enum):
    directdebit_GB = 'directdebit_GB'


class BacsDirectDebitDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bankAccountNumber: Optional[str] = Field(
        None, description='The bank account number (without separators).'
    )
    bankLocationId: Optional[str] = Field(
        None, description='The bank routing number of the account.'
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    holderName: Optional[str] = Field(
        None, description='The name of the bank account holder.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type5] = Field('directdebit_GB', description='**directdebit_GB**')


class BankAccount(BaseModel):
    bankAccountNumber: Optional[str] = Field(
        None, description='The bank account number (without separators).'
    )
    bankCity: Optional[str] = Field(None, description='The bank city.')
    bankLocationId: Optional[str] = Field(
        None,
        description='The location id of the bank. The field value is `nil` in most cases.',
    )
    bankName: Optional[str] = Field(None, description='The name of the bank.')
    bic: Optional[str] = Field(
        None,
        description='The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.',
    )
    countryCode: Optional[str] = Field(
        None,
        description="Country code where the bank is located.\n\nA valid value is an ISO two-character country code (e.g. 'NL').",
    )
    iban: Optional[str] = Field(
        None,
        description='The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).',
    )
    ownerName: Optional[str] = Field(
        None,
        description="The name of the bank account holder.\nIf you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n* χ12 is converted to ch12.\n* üA is converted to euA.\n* Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\nAfter replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n* John17 - allowed.\n* J17 - allowed.\n* 171 - not allowed.\n* John-7 - allowed.\n> If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.",
    )
    taxId: Optional[str] = Field(None, description="The bank account holder's tax ID.")


class Type6(Enum):
    billdesk_online = 'billdesk_online'
    billdesk_wallet = 'billdesk_wallet'
    onlinebanking_IN = 'onlinebanking_IN'
    wallet_IN = 'wallet_IN'


class BillDeskDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    issuer: str = Field(
        ..., description="The issuer id of the shopper's selected bank."
    )
    type: Type6 = Field(..., description='**billdesk**')


class Type7(Enum):
    blik = 'blik'


class BlikDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    blikCode: Optional[str] = Field(
        None, description='BLIK code consisting of 6 digits.'
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type7] = Field(None, description='**blik**')


class BrowserInfo(BaseModel):
    acceptHeader: str = Field(
        ..., description="The accept header value of the shopper's browser."
    )
    colorDepth: int = Field(
        ...,
        description="The color depth of the shopper's browser in bits per pixel. This should be obtained by using the browser's `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth.",
    )
    javaEnabled: bool = Field(
        ...,
        description="Boolean value indicating if the shopper's browser is able to execute Java.",
    )
    javaScriptEnabled: Optional[bool] = Field(
        True,
        description="Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.",
    )
    language: str = Field(
        ...,
        description="The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).",
    )
    screenHeight: int = Field(
        ..., description="The total height of the shopper's device screen in pixels."
    )
    screenWidth: int = Field(
        ..., description="The total width of the shopper's device screen in pixels."
    )
    timeZoneOffset: int = Field(
        ...,
        description="Time difference between UTC time and the shopper's browser local time, in minutes.",
    )
    userAgent: str = Field(
        ..., description="The user agent value of the shopper's browser."
    )


class Card(BaseModel):
    cvc: Optional[constr(min_length=1, max_length=20)] = Field(
        None,
        description='The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:\n* CVV2/CVC2 – length: 3 digits\n* CID – length: 4 digits\n> If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.\n> This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).\n> When this value is returned in a response, it is always empty because it is not stored.',
    )
    expiryMonth: Optional[constr(min_length=1, max_length=2)] = Field(
        None,
        description='The card expiry month.\nFormat: 2 digits, zero-padded for single digits. For example:\n* 03 = March\n* 11 = November',
    )
    expiryYear: Optional[constr(min_length=4, max_length=4)] = Field(
        None, description='The card expiry year.\nFormat: 4 digits. For example: 2020'
    )
    holderName: Optional[constr(min_length=1, max_length=50)] = Field(
        None, description='The name of the cardholder, as printed on the card.'
    )
    issueNumber: Optional[constr(min_length=1, max_length=2)] = Field(
        None, description='The issue number of the card (for some UK debit cards only).'
    )
    number: Optional[constr(min_length=4, max_length=19)] = Field(
        None,
        description='The card number (4-19 characters). Do not use any separators.\nWhen this value is returned in a response, only the last 4 digits of the card number are returned.',
    )
    startMonth: Optional[constr(min_length=1, max_length=2)] = Field(
        None,
        description='The month component of the start date (for some UK debit cards only).',
    )
    startYear: Optional[constr(min_length=4, max_length=4)] = Field(
        None,
        description='The year component of the start date (for some UK debit cards only).',
    )


class CardBrandDetails(BaseModel):
    supported: Optional[bool] = Field(
        None, description='Indicates if you support the card brand.'
    )
    type: Optional[str] = Field(None, description='The name of the card brand.')


class Type8(Enum):
    scheme = 'scheme'
    networkToken = 'networkToken'
    giftcard = 'giftcard'
    alliancedata = 'alliancedata'
    card = 'card'


class CardDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    brand: Optional[str] = Field(
        None,
        description='Secondary brand of the card. For example: **plastix**, **hmclub**.',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    cupsecureplus_smscode: Optional[str] = Field(None, alias='cupsecureplus.smscode')
    cvc: Optional[str] = Field(
        None,
        description='The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).',
    )
    encryptedCardNumber: Optional[constr(max_length=10000)] = Field(
        None, description='The encrypted card number.'
    )
    encryptedExpiryMonth: Optional[constr(max_length=10000)] = Field(
        None, description='The encrypted card expiry month.'
    )
    encryptedExpiryYear: Optional[constr(max_length=10000)] = Field(
        None, description='The encrypted card expiry year.'
    )
    encryptedSecurityCode: Optional[constr(max_length=10000)] = Field(
        None, description='The encrypted card verification code.'
    )
    expiryMonth: Optional[str] = Field(
        None,
        description='The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).',
    )
    expiryYear: Optional[str] = Field(
        None,
        description='The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).',
    )
    fundingSource: Optional[FundingSource] = Field(
        None,
        description='The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.',
    )
    holderName: Optional[str] = Field(None, description='The name of the card holder.')
    networkPaymentReference: Optional[str] = Field(
        None,
        description='The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.',
    )
    number: Optional[str] = Field(
        None,
        description='The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    shopperNotificationReference: Optional[str] = Field(
        None,
        description='The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    threeDS2SdkVersion: Optional[constr(max_length=12)] = Field(
        None, description='Version of the 3D Secure 2 mobile SDK.'
    )
    type: Optional[Type8] = Field(
        'scheme',
        description='Default payment method details. Common for scheme payment methods, and for simple payment method details.',
    )


class CardDetailsRequest(BaseModel):
    cardNumber: str = Field(
        ...,
        description='A minimum of the first 8 digits of the card number and a maximum of the full card number. 11 digits gives the best result. \n\nYou must be [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide) to collect raw card data.',
    )
    countryCode: Optional[str] = Field(
        None,
        description='The shopper country.\n\nFormat: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nExample: NL or DE',
    )
    encryptedCardNumber: Optional[str] = Field(
        None, description='The encrypted card number.'
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    supportedBrands: Optional[List[str]] = Field(
        None,
        description='The card brands you support. This is the [`brands`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods__resParam_paymentMethods-brands) array from your [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response. \n\nIf not included, our API uses the ones configured for your merchant account and, if provided, the country code.',
    )


class CardDetailsResponse(BaseModel):
    brands: Optional[List[CardBrandDetails]] = Field(
        None, description='The list of brands identified for the card.'
    )


class Type9(Enum):
    cellulant = 'cellulant'


class CellulantDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    issuer: Optional[str] = Field(None, description='The Cellulant issuer.')
    type: Optional[Type9] = Field('cellulant', description='**Cellulant**')


class Type10(Enum):
    await_ = 'await'


class CheckoutAwaitAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    paymentData: Optional[str] = Field(
        None,
        description='A value that must be submitted to the `/payments/details` endpoint to verify this payment.',
    )
    paymentMethodType: Optional[str] = Field(
        None, description='Specifies the payment method.'
    )
    type: Type10 = Field(..., description='**await**')
    url: Optional[str] = Field(None, description='Specifies the URL to redirect to.')


class RecurringProcessingModel(Enum):
    CardOnFile = 'CardOnFile'
    Subscription = 'Subscription'
    UnscheduledCardOnFile = 'UnscheduledCardOnFile'


class ShopperInteraction(Enum):
    Ecommerce = 'Ecommerce'
    ContAuth = 'ContAuth'
    Moto = 'Moto'
    POS = 'POS'


class ResultCode(Enum):
    Success = 'Success'
    NotEnoughBalance = 'NotEnoughBalance'
    Failed = 'Failed'


class ResultCode1(Enum):
    Received = 'Received'


class CheckoutCancelOrderResponse(BaseModel):
    pspReference: str = Field(
        ..., description='A unique reference of the cancellation request.'
    )
    resultCode: ResultCode1 = Field(
        ...,
        description='The result of the cancellation request.\n\nPossible values:\n\n* **Received** – Indicates the cancellation has successfully been received by Adyen, and will be processed.',
    )


class CheckoutCreateOrderRequest(BaseModel):
    amount: Amount = Field(..., description='The total amount of the order.')
    expiresAt: Optional[str] = Field(
        None,
        description='The date that order expires; e.g. 2019-03-23T12:25:28Z. If not provided, the default expiry duration is 1 day.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the order.',
    )
    reference: str = Field(..., description='A custom reference identifying the order.')


class ResultCode2(Enum):
    Success = 'Success'


class Type11(Enum):
    nativeRedirect = 'nativeRedirect'


class CheckoutNativeRedirectAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[Dict[str, str]] = Field(
        None,
        description='When the redirect URL must be accessed via POST, use this data to post to the redirect URL.',
    )
    method: Optional[str] = Field(
        None, description='Specifies the HTTP method, for example GET or POST.'
    )
    nativeRedirectData: Optional[str] = Field(
        None,
        description="Native SDK's redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.",
    )
    paymentMethodType: Optional[str] = Field(
        None, description='Specifies the payment method.'
    )
    type: Type11 = Field(..., description='**nativeRedirect**')
    url: Optional[str] = Field(None, description='Specifies the URL to redirect to.')


class CheckoutOrderResponse(BaseModel):
    amount: Optional[Amount] = Field(
        None, description='The initial amount of the order.'
    )
    expiresAt: Optional[str] = Field(None, description='The expiry date for the order.')
    orderData: Optional[str] = Field(None, description='The encrypted order data.')
    pspReference: str = Field(
        ..., description='The `pspReference` that belongs to the order.'
    )
    reference: Optional[str] = Field(
        None, description='The merchant reference for the order.'
    )
    remainingAmount: Optional[Amount] = Field(
        None, description='The updated remaining amount.'
    )


class Type12(Enum):
    qrCode = 'qrCode'


class CheckoutQrCodeAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expiresAt: Optional[str] = Field(None, description='Expiry time of the QR code.')
    paymentData: Optional[str] = Field(
        None,
        description='A value that must be submitted to the `/payments/details` endpoint to verify this payment.',
    )
    paymentMethodType: Optional[str] = Field(
        None, description='Specifies the payment method.'
    )
    qrCodeData: Optional[str] = Field(
        None, description='The contents of the QR code as a UTF8 string.'
    )
    type: Type12 = Field(..., description='**qrCode**')
    url: Optional[str] = Field(None, description='Specifies the URL to redirect to.')


class Type13(Enum):
    redirect = 'redirect'


class CheckoutRedirectAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[Dict[str, str]] = Field(
        None,
        description='When the redirect URL must be accessed via POST, use this data to post to the redirect URL.',
    )
    method: Optional[str] = Field(
        None, description='Specifies the HTTP method, for example GET or POST.'
    )
    paymentMethodType: Optional[str] = Field(
        None, description='Specifies the payment method.'
    )
    type: Type13 = Field(..., description='**redirect**')
    url: Optional[str] = Field(None, description='Specifies the URL to redirect to.')


class Type14(Enum):
    sdk = 'sdk'
    wechatpaySDK = 'wechatpaySDK'


class CheckoutSDKAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    paymentData: Optional[str] = Field(
        None,
        description='A value that must be submitted to the `/payments/details` endpoint to verify this payment.',
    )
    paymentMethodType: Optional[str] = Field(
        None, description='Specifies the payment method.'
    )
    sdkData: Optional[Dict[str, str]] = Field(
        None, description='The data to pass to the SDK.'
    )
    type: Type14 = Field(..., description='The type of the action.')
    url: Optional[str] = Field(None, description='Specifies the URL to redirect to.')


class Plan(Enum):
    regular = 'regular'
    revolving = 'revolving'


class CheckoutSessionInstallmentOption(BaseModel):
    plans: Optional[List[Plan]] = Field(
        None,
        description='Defines the type of installment plan. If not set, defaults to **regular**.\n\nPossible values:\n* **regular**\n* **revolving**',
    )
    preselectedValue: Optional[int] = Field(
        None,
        description='Preselected number of installments offered for this payment method.',
    )
    values: Optional[List[int]] = Field(
        None,
        description='An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with `maxValue`.',
    )


class Type15(Enum):
    threeDS2 = 'threeDS2'


class CheckoutThreeDS2Action(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    authorisationToken: Optional[str] = Field(
        None, description='A token needed to authorise a payment.'
    )
    paymentData: Optional[str] = Field(
        None,
        description='A value that must be submitted to the `/payments/details` endpoint to verify this payment.',
    )
    paymentMethodType: Optional[str] = Field(
        None, description='Specifies the payment method.'
    )
    subtype: Optional[str] = Field(None, description='A subtype of the token.')
    token: Optional[str] = Field(
        None,
        description='A token to pass to the 3DS2 Component to get the fingerprint.',
    )
    type: Type15 = Field(..., description='**threeDS2**')
    url: Optional[str] = Field(None, description='Specifies the URL to redirect to.')


class CheckoutUtilityRequest(BaseModel):
    originDomains: List[str] = Field(
        ...,
        description='The list of origin domains, for which origin keys are requested.',
    )


class CheckoutUtilityResponse(BaseModel):
    originKeys: Optional[Dict[str, str]] = Field(
        None,
        description='The list of origin keys for all requested domains. For each list item, the key is the domain and the value is the origin key.',
    )


class Type16(Enum):
    voucher = 'voucher'


class CheckoutVoucherAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    alternativeReference: Optional[str] = Field(
        None, description='The voucher alternative reference code.'
    )
    collectionInstitutionNumber: Optional[str] = Field(
        None,
        description='A collection institution number (store number) for Econtext Pay-Easy ATM.',
    )
    downloadUrl: Optional[str] = Field(
        None, description='The URL to download the voucher.'
    )
    entity: Optional[str] = Field(None, description='An entity number of Multibanco.')
    expiresAt: Optional[str] = Field(
        None, description='The date time of the voucher expiry.'
    )
    initialAmount: Optional[Amount] = Field(None, description='The initial amount.')
    instructionsUrl: Optional[str] = Field(
        None,
        description='The URL to the detailed instructions to make payment using the voucher.',
    )
    issuer: Optional[str] = Field(None, description='The issuer of the voucher.')
    maskedTelephoneNumber: Optional[str] = Field(
        None, description='The shopper telephone number (partially masked).'
    )
    merchantName: Optional[str] = Field(None, description='The merchant name.')
    merchantReference: Optional[str] = Field(
        None, description='The merchant reference.'
    )
    paymentData: Optional[str] = Field(
        None,
        description='A value that must be submitted to the `/payments/details` endpoint to verify this payment.',
    )
    paymentMethodType: Optional[str] = Field(
        None, description='Specifies the payment method.'
    )
    reference: Optional[str] = Field(None, description='The voucher reference code.')
    shopperEmail: Optional[str] = Field(None, description='The shopper email.')
    shopperName: Optional[str] = Field(None, description='The shopper name.')
    surcharge: Optional[Amount] = Field(None, description='The surcharge amount.')
    totalAmount: Optional[Amount] = Field(
        None, description='The total amount (initial plus surcharge amount).'
    )
    type: Type16 = Field(..., description='**voucher**')
    url: Optional[str] = Field(None, description='Specifies the URL to redirect to.')


class CommonField(BaseModel):
    name: Optional[str] = Field(
        None, description='Name of the field. For example, Name of External Platform.'
    )
    version: Optional[str] = Field(
        None,
        description='Version of the field. For example, Version of External Platform.',
    )


class Company(BaseModel):
    homepage: Optional[str] = Field(
        None, description="The company website's home page."
    )
    name: Optional[str] = Field(None, description='The company name.')
    registrationNumber: Optional[str] = Field(
        None, description='Registration number of the company.'
    )
    registryLocation: Optional[str] = Field(
        None, description='Registry location of the company.'
    )
    taxId: Optional[str] = Field(None, description='Tax ID of the company.')
    type: Optional[str] = Field(None, description='The company type.')


class CardHolderName(Enum):
    NONE = 'NONE'
    OPTIONAL = 'OPTIONAL'
    REQUIRED = 'REQUIRED'


class CreateApplePaySessionRequest(BaseModel):
    displayName: str = Field(
        ...,
        description='This is the name that your shoppers will see in the Apple Pay interface.\n\nThe value returned as `configuration.merchantName` field from the [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.',
    )
    domainName: str = Field(
        ...,
        description='The domain name you provided when you added Apple Pay in your Customer Area.\n\nThis must match the `window.location.hostname` of the web shop.',
    )
    merchantIdentifier: str = Field(
        ...,
        description='Your merchant identifier registered with Apple Pay.\n\nUse the value of the `configuration.merchantId` field from the [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.',
    )


class Channel(Enum):
    iOS = 'iOS'
    Android = 'Android'
    Web = 'Web'


class StorePaymentMethodMode(Enum):
    askForConsent = 'askForConsent'
    disabled = 'disabled'
    enabled = 'enabled'


class Mode(Enum):
    embedded = 'embedded'
    hosted = 'hosted'


class IndustryUsage1(Enum):
    delayedCharge = 'delayedCharge'
    installment = 'installment'
    noShow = 'noShow'


class CreatePaymentCancelRequest(BaseModel):
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    reference: Optional[str] = Field(
        None,
        description='Your reference for the cancel request. Maximum length: 80 characters.',
    )


class RequiredShopperField(Enum):
    billingAddress = 'billingAddress'
    deliveryAddress = 'deliveryAddress'
    shopperEmail = 'shopperEmail'
    shopperName = 'shopperName'
    telephoneNumber = 'telephoneNumber'


class MerchantRefundReason(Enum):
    FRAUD = 'FRAUD'
    CUSTOMER_REQUEST = 'CUSTOMER REQUEST'
    RETURN = 'RETURN'
    DUPLICATE = 'DUPLICATE'
    OTHER = 'OTHER'


class CreatePaymentReversalRequest(BaseModel):
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    reference: Optional[str] = Field(
        None,
        description='Your reference for the reversal request. Maximum length: 80 characters.',
    )


class CreateStandalonePaymentCancelRequest(BaseModel):
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    paymentReference: str = Field(
        ...,
        description='The [`reference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_reference) of the payment that you want to cancel.',
    )
    reference: Optional[str] = Field(
        None,
        description='Your reference for the cancel request. Maximum length: 80 characters.',
    )


class DetailsRequestAuthenticationData(BaseModel):
    authenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.\nDefault: *false**.',
    )


class SdkInterface(Enum):
    native = 'native'
    html = 'html'
    both = 'both'


class SdkUiTypeEnum(Enum):
    multiSelect = 'multiSelect'
    otherHtml = 'otherHtml'
    outOfBand = 'outOfBand'
    singleSelect = 'singleSelect'
    text = 'text'


class DeviceRenderOptions(BaseModel):
    sdkInterface: Optional[SdkInterface] = Field(
        'both',
        description='Supported SDK interface types.\nAllowed values:\n* native\n* html\n* both',
    )
    sdkUiType: Optional[List[SdkUiTypeEnum]] = Field(
        None,
        description='UI types supported for displaying specific challenges.\nAllowed values:\n* text\n* singleSelect\n* outOfBand\n* otherHtml\n* multiSelect',
    )


class Type17(Enum):
    doku_mandiri_va = 'doku_mandiri_va'
    doku_cimb_va = 'doku_cimb_va'
    doku_danamon_va = 'doku_danamon_va'
    doku_bni_va = 'doku_bni_va'
    doku_permata_lite_atm = 'doku_permata_lite_atm'
    doku_bri_va = 'doku_bri_va'
    doku_bca_va = 'doku_bca_va'
    doku_alfamart = 'doku_alfamart'
    doku_indomaret = 'doku_indomaret'


class DokuDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    firstName: str = Field(..., description="The shopper's first name.")
    lastName: str = Field(..., description="The shopper's last name.")
    shopperEmail: str = Field(..., description="The shopper's email.")
    type: Type17 = Field(..., description='**doku**')


class Status(Enum):
    completed = 'completed'
    pending = 'pending'
    refused = 'refused'


class Type18(Enum):
    dotpay = 'dotpay'


class DotpayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    issuer: str = Field(
        ...,
        description="The Dotpay issuer value of the shopper's selected bank. Set this to an **id** of a Dotpay issuer to preselect it.",
    )
    type: Optional[Type18] = Field('dotpay', description='**dotpay**')


class Type19(Enum):
    dragonpay_ebanking = 'dragonpay_ebanking'
    dragonpay_otc_banking = 'dragonpay_otc_banking'
    dragonpay_otc_non_banking = 'dragonpay_otc_non_banking'
    dragonpay_otc_philippines = 'dragonpay_otc_philippines'


class DragonpayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    issuer: str = Field(
        ...,
        description="The Dragonpay issuer value of the shopper's selected bank. Set this to an **id** of a Dragonpay issuer to preselect it.",
    )
    shopperEmail: Optional[str] = Field(
        None, description='The shopper’s email address.'
    )
    type: Type19 = Field(..., description='**dragonpay**')


class Type20(Enum):
    econtext_seveneleven = 'econtext_seveneleven'
    econtext_stores = 'econtext_stores'


class EcontextVoucherDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    firstName: str = Field(..., description="The shopper's first name.")
    lastName: str = Field(..., description="The shopper's last name.")
    shopperEmail: str = Field(..., description="The shopper's email.")
    telephoneNumber: str = Field(
        ...,
        description="The shopper's contact number. It must have an international number format, for example **+31 20 779 1846**. Formats like **+31 (0)20 779 1846** or **0031 20 779 1846** are not accepted.",
    )
    type: Type20 = Field(..., description='**econtextvoucher**')


class EncryptedOrderData(BaseModel):
    orderData: str = Field(..., description='The encrypted order data.')
    pspReference: str = Field(
        ..., description='The `pspReference` that belongs to the order.'
    )


class ExternalPlatform(BaseModel):
    integrator: Optional[str] = Field(None, description='External platform integrator.')
    name: Optional[str] = Field(
        None, description='Name of the field. For example, Name of External Platform.'
    )
    version: Optional[str] = Field(
        None,
        description='Version of the field. For example, Version of External Platform.',
    )


class ForexQuote(BaseModel):
    account: Optional[str] = Field(None, description='The account name.')
    accountType: Optional[str] = Field(None, description='The account type.')
    baseAmount: Optional[Amount] = Field(None, description='The base amount.')
    basePoints: int = Field(..., description='The base points.')
    buy: Optional[Amount] = Field(None, description='The buy rate.')
    interbank: Optional[Amount] = Field(None, description='The interbank amount.')
    reference: Optional[str] = Field(
        None, description='The reference assigned to the forex quote request.'
    )
    sell: Optional[Amount] = Field(None, description='The sell rate.')
    signature: Optional[str] = Field(
        None, description='The signature to validate the integrity.'
    )
    source: Optional[str] = Field(None, description='The source of the forex quote.')
    type: Optional[str] = Field(None, description='The type of forex.')
    validTill: datetime = Field(
        ..., description='The date until which the forex quote is valid.'
    )


class FraudCheckResult(BaseModel):
    accountScore: int = Field(
        ..., description='The fraud score generated by the risk check.'
    )
    checkId: int = Field(..., description='The ID of the risk check.')
    name: str = Field(..., description='The name of the risk check.')


class FraudResult(BaseModel):
    accountScore: int = Field(
        ..., description='The total fraud score generated by the risk checks.'
    )
    results: Optional[List[FraudCheckResult]] = Field(
        None, description='The result of the individual risk checks.'
    )


class Type21(Enum):
    onlineBanking_PL = 'onlineBanking_PL'
    eps = 'eps'
    onlineBanking_SK = 'onlineBanking_SK'
    onlineBanking_CZ = 'onlineBanking_CZ'


class GenericIssuerPaymentMethodDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    issuer: str = Field(
        ..., description="The issuer id of the shopper's selected bank."
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Type21 = Field(..., description='**genericissuer**')


class Type22(Enum):
    giropay = 'giropay'


class GiropayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type22] = Field('giropay', description='**giropay**')


class Type23(Enum):
    googlepay = 'googlepay'


class GooglePayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None,
        description='The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.',
    )
    googlePayToken: str = Field(
        ...,
        description='The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type23] = Field(
        'googlepay', description='**googlepay**, **paywithgoogle**'
    )


class Type24(Enum):
    ideal = 'ideal'


class IdealDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    issuer: str = Field(
        ...,
        description="The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it.",
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type24] = Field('ideal', description='**ideal**')


class InstallmentOption(BaseModel):
    maxValue: Optional[int] = Field(
        None,
        description='The maximum number of installments offered for this payment method.',
    )
    plans: Optional[List[Plan]] = Field(
        None,
        description='Defines the type of installment plan. If not set, defaults to **regular**.\n\nPossible values:\n* **regular**\n* **revolving**',
    )
    preselectedValue: Optional[int] = Field(
        None,
        description='Preselected number of installments offered for this payment method.',
    )
    values: Optional[List[int]] = Field(
        None,
        description='An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with `maxValue`.',
    )


class Installments(BaseModel):
    plan: Optional[Plan] = Field(
        None,
        description='The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan). By default, this is set to **regular**. Possible values:\n* **regular**\n* **revolving**\n',
    )
    value: int = Field(
        ...,
        description='Defines the number of installments. Its value needs to be greater than zero.\n\nUsually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary.',
    )


class InstallmentsNumber(BaseModel):
    maxNumberOfInstallments: int = Field(
        ..., description='Maximum number of installments'
    )


class Item(BaseModel):
    id: Optional[str] = Field(None, description='The value to provide in the result.')
    name: Optional[str] = Field(None, description='The display name.')


class Type25(Enum):
    klarna = 'klarna'
    klarnapayments = 'klarnapayments'
    klarnapayments_account = 'klarnapayments_account'
    klarnapayments_b2b = 'klarnapayments_b2b'
    klarna_paynow = 'klarna_paynow'
    klarna_account = 'klarna_account'
    klarna_b2b = 'klarna_b2b'


class KlarnaDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    billingAddress: Optional[str] = Field(
        None, description='The address where to send the invoice.'
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    deliveryAddress: Optional[str] = Field(
        None, description='The address where the goods should be delivered.'
    )
    personalDetails: Optional[str] = Field(
        None,
        description='Shopper name, date of birth, phone number, and email address.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Type25 = Field(..., description='**klarna**')


class LineItem(BaseModel):
    amountExcludingTax: Optional[int] = Field(
        None, description='Item amount excluding the tax, in minor units.'
    )
    amountIncludingTax: Optional[int] = Field(
        None, description='Item amount including the tax, in minor units.'
    )
    brand: Optional[str] = Field(None, description='Brand of the item.')
    color: Optional[str] = Field(None, description='Color of the item.')
    description: Optional[str] = Field(
        None, description='Description of the line item.'
    )
    id: Optional[str] = Field(None, description='ID of the line item.')
    imageUrl: Optional[str] = Field(
        None, description='Link to the picture of the purchased item.'
    )
    itemCategory: Optional[str] = Field(
        None, description='Item category, used by the RatePay payment method.'
    )
    manufacturer: Optional[str] = Field(None, description='Manufacturer of the item.')
    productUrl: Optional[str] = Field(None, description='Link to the purchased item.')
    quantity: Optional[int] = Field(None, description='Number of items.')
    receiverEmail: Optional[str] = Field(
        None,
        description='Email associated with the given product in the basket (usually in electronic gift cards).',
    )
    size: Optional[str] = Field(None, description='Size of the item.')
    sku: Optional[str] = Field(None, description='Stock keeping unit.')
    taxAmount: Optional[int] = Field(None, description='Tax amount, in minor units.')
    taxPercentage: Optional[int] = Field(
        None, description='Tax percentage, in minor units.'
    )
    upc: Optional[str] = Field(None, description='Universal Product Code.')


class AmountRule(Enum):
    max = 'max'
    exact = 'exact'


class BillingAttemptsRule(Enum):
    on = 'on'
    before = 'before'
    after = 'after'


class Frequency(Enum):
    adhoc = 'adhoc'
    daily = 'daily'
    weekly = 'weekly'
    biWeekly = 'biWeekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    halfYearly = 'halfYearly'
    yearly = 'yearly'


class Mandate(BaseModel):
    amount: str = Field(
        ...,
        description='The billing amount (in minor units) of the recurring transactions.',
    )
    amountRule: Optional[AmountRule] = Field(
        None,
        description='The limitation rule of the billing amount.\n\nPossible values:\n * **max**: The transaction amount can not exceed the `amount`.\n\n * **exact**: The transaction amount should be the same as the `amount`.\n\n',
    )
    billingAttemptsRule: Optional[BillingAttemptsRule] = Field(
        None,
        description='The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.\n\nPossible values:\n\n * **on**: On a specific date.\n\n * **before**:  Before and on a specific date.\n\n * **after**: On and after a specific date.\n\n',
    )
    billingDay: Optional[str] = Field(
        None,
        description='The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.\n\nPossible values: 1-31 based on the `frequency`.',
    )
    endsAt: str = Field(
        ..., description='End date of the billing plan, in YYYY-MM-DD format.'
    )
    frequency: Frequency = Field(
        ...,
        description='The frequency with which a shopper should be charged.\n\nPossible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.',
    )
    remarks: Optional[str] = Field(
        None,
        description='The message shown by UPI to the shopper on the approval screen.',
    )
    startsAt: Optional[str] = Field(
        None,
        description='Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.',
    )


class Type26(Enum):
    masterpass = 'masterpass'


class MasterpassDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None,
        description='The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.',
    )
    masterpassTransactionId: str = Field(
        ..., description='The Masterpass transaction ID.'
    )
    type: Optional[Type26] = Field('masterpass', description='**masterpass**')


class Type27(Enum):
    mbway = 'mbway'


class MbwayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    shopperEmail: str = Field(..., description='')
    telephoneNumber: str = Field(..., description='')
    type: Optional[Type27] = Field('mbway', description='**mbway**')


class MerchantDevice(BaseModel):
    os: Optional[str] = Field(
        None, description='Operating system running on the merchant device.'
    )
    osVersion: Optional[str] = Field(
        None, description='Version of the operating system on the merchant device.'
    )
    reference: Optional[str] = Field(None, description='Merchant device reference.')


class DeliveryAddressIndicator(Enum):
    shipToBillingAddress = 'shipToBillingAddress'
    shipToVerifiedAddress = 'shipToVerifiedAddress'
    shipToNewAddress = 'shipToNewAddress'
    shipToStore = 'shipToStore'
    digitalGoods = 'digitalGoods'
    goodsNotShipped = 'goodsNotShipped'
    other = 'other'


class DeliveryTimeframe(Enum):
    electronicDelivery = 'electronicDelivery'
    sameDayShipping = 'sameDayShipping'
    overnightShipping = 'overnightShipping'
    twoOrMoreDaysShipping = 'twoOrMoreDaysShipping'


class MerchantRiskIndicator(BaseModel):
    addressMatch: Optional[bool] = Field(
        None,
        description='Whether the chosen delivery address is identical to the billing address.',
    )
    deliveryAddressIndicator: Optional[DeliveryAddressIndicator] = Field(
        None,
        description='Indicator regarding the delivery address.\nAllowed values:\n* `shipToBillingAddress`\n* `shipToVerifiedAddress`\n* `shipToNewAddress`\n* `shipToStore`\n* `digitalGoods`\n* `goodsNotShipped`\n* `other`',
    )
    deliveryEmail: Optional[str] = Field(
        None, description='The delivery email address (for digital goods).'
    )
    deliveryEmailAddress: Optional[constr(max_length=254)] = Field(
        None,
        description='For Electronic delivery, the email address to which the merchandise was delivered. Maximum length: 254 characters.',
    )
    deliveryTimeframe: Optional[DeliveryTimeframe] = Field(
        None,
        description='The estimated delivery time for the shopper to receive the goods.\nAllowed values:\n* `electronicDelivery`\n* `sameDayShipping`\n* `overnightShipping`\n* `twoOrMoreDaysShipping`',
    )
    giftCardAmount: Optional[Amount] = Field(
        None,
        description='For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s).',
    )
    giftCardCount: Optional[int] = Field(
        None,
        description='For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.',
    )
    giftCardCurr: Optional[str] = Field(
        None,
        description='For prepaid or gift card purchase, [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three-digit currency code of the gift card, other than those listed in Table A.5 of the EMVCo 3D Secure Protocol and Core Functions Specification.',
    )
    preOrderDate: Optional[datetime] = Field(
        None,
        description='For pre-order purchases, the expected date this product will be available to the shopper.',
    )
    preOrderPurchase: Optional[bool] = Field(
        None,
        description='Indicator for whether this transaction is for pre-ordering a product.',
    )
    preOrderPurchaseInd: Optional[str] = Field(
        None,
        description='Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.',
    )
    reorderItems: Optional[bool] = Field(
        None,
        description='Indicator for whether the shopper has already purchased the same items in the past.',
    )
    reorderItemsInd: Optional[str] = Field(
        None,
        description='Indicates whether the cardholder is reordering previously purchased merchandise.',
    )
    shipIndicator: Optional[str] = Field(
        None, description='Indicates shipping method chosen for the transaction.'
    )


class Type28(Enum):
    mobilepay = 'mobilepay'


class MobilePayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    type: Optional[Type28] = Field('mobilepay', description='**mobilepay**')


class Type29(Enum):
    molpay_ebanking_fpx_MY = 'molpay_ebanking_fpx_MY'
    molpay_ebanking_TH = 'molpay_ebanking_TH'


class MolPayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    issuer: str = Field(
        ...,
        description="The shopper's bank. Specify this with the issuer value that corresponds to this bank.",
    )
    type: Type29 = Field(..., description='**molpay**')


class Name(BaseModel):
    firstName: str = Field(..., description='The first name.')
    lastName: str = Field(..., description='The last name.')


class Type30(Enum):
    openinvoice = 'openinvoice'
    afterpay_directdebit = 'afterpay_directdebit'
    atome_pos = 'atome_pos'


class OpenInvoiceDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    billingAddress: Optional[str] = Field(
        None, description='The address where to send the invoice.'
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    deliveryAddress: Optional[str] = Field(
        None, description='The address where the goods should be delivered.'
    )
    personalDetails: Optional[str] = Field(
        None,
        description='Shopper name, date of birth, phone number, and email address.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type30] = Field('openinvoice', description='**openinvoice**')


class Subtype(Enum):
    redirect = 'redirect'
    sdk = 'sdk'


class Type31(Enum):
    paypal = 'paypal'


class PayPalDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    orderID: Optional[str] = Field(
        None, description='The unique ID associated with the order.'
    )
    payerID: Optional[str] = Field(
        None, description='The unique ID associated with the payer.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    subtype: Optional[Subtype] = Field(
        None, description='The type of flow to initiate.'
    )
    type: Type31 = Field(..., description='**paypal**')


class Type32(Enum):
    payu_IN_upi = 'payu_IN_upi'


class PayUUpiDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    shopperNotificationReference: Optional[str] = Field(
        None,
        description='The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Type32 = Field(..., description='**payu_IN_upi**')
    virtualPaymentAddress: Optional[str] = Field(
        None, description='The virtual payment address for UPI.'
    )


class Type33(Enum):
    paywithgoogle = 'paywithgoogle'


class PayWithGoogleDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None,
        description='The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.',
    )
    googlePayToken: str = Field(
        ...,
        description='The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type33] = Field('paywithgoogle', description='**paywithgoogle**')


class Status1(Enum):
    received = 'received'


class PaymentCancelResource(BaseModel):
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    paymentPspReference: str = Field(
        ...,
        description='The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to cancel. ',
    )
    pspReference: str = Field(
        ...,
        description="Adyen's 16-character reference associated with the cancel request.",
    )
    reference: Optional[str] = Field(
        None, description='Your reference for the cancel request.'
    )
    status: Status1 = Field(
        ...,
        description='The status of your request. This will always have the value **received**.',
    )


class PaymentCompletionDetails(BaseModel):
    MD: Optional[constr(max_length=20000)] = Field(
        None, description='A payment session identifier returned by the card issuer.'
    )
    PaReq: Optional[str] = Field(
        None,
        description='(3D) Payment Authentication Request data for the card issuer.',
    )
    PaRes: Optional[constr(max_length=20000)] = Field(
        None,
        description='(3D) Payment Authentication Response data by the card issuer.',
    )
    billingToken: Optional[str] = Field(
        None, description='PayPal-generated token for recurring payments.'
    )
    cupsecureplus_smscode: Optional[str] = Field(
        None,
        alias='cupsecureplus.smscode',
        description='The SMS verification code collected from the shopper.',
    )
    facilitatorAccessToken: Optional[str] = Field(
        None, description='PayPal-generated third party access token.'
    )
    oneTimePasscode: Optional[str] = Field(
        None,
        description='A random number sent to the mobile phone number of the shopper to verify the payment.',
    )
    orderID: Optional[str] = Field(
        None, description='PayPal-assigned ID for the order.'
    )
    payerID: Optional[str] = Field(
        None, description='PayPal-assigned ID for the payer (shopper).'
    )
    payload: Optional[constr(max_length=20000)] = Field(
        None,
        description='Payload appended to the `returnURL` as a result of the redirect.',
    )
    paymentID: Optional[str] = Field(
        None, description='PayPal-generated ID for the payment.'
    )
    paymentStatus: Optional[str] = Field(
        None,
        description='Value passed from the WeChat MiniProgram `wx.requestPayment` **complete** callback. Possible values: any value starting with `requestPayment:`.',
    )
    redirectResult: Optional[constr(max_length=20000)] = Field(
        None, description='The result of the redirect as appended to the `returnURL`.'
    )
    resultCode: Optional[str] = Field(
        None, description='Value you received from the WeChat Pay SDK.'
    )
    threeDSResult: Optional[constr(max_length=50000)] = Field(
        None,
        description='Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: `transStatus`, `authorisationToken`.',
    )
    threeds2_challengeResult: Optional[constr(max_length=50000)] = Field(
        None,
        alias='threeds2.challengeResult',
        description='Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `transStatus`.',
    )
    threeds2_fingerprint: Optional[constr(max_length=100000)] = Field(
        None,
        alias='threeds2.fingerprint',
        description='Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `threeDSCompInd`.',
    )


class Type34(Enum):
    alipay = 'alipay'
    multibanco = 'multibanco'
    bankTransfer_IBAN = 'bankTransfer_IBAN'
    paybright = 'paybright'
    paynow = 'paynow'
    affirm = 'affirm'
    affirm_pos = 'affirm_pos'
    trustly = 'trustly'
    trustlyvector = 'trustlyvector'
    oney = 'oney'
    facilypay = 'facilypay'
    facilypay_3x = 'facilypay_3x'
    facilypay_4x = 'facilypay_4x'
    facilypay_6x = 'facilypay_6x'
    facilypay_10x = 'facilypay_10x'
    facilypay_12x = 'facilypay_12x'
    unionpay = 'unionpay'
    kcp_banktransfer = 'kcp_banktransfer'
    kcp_payco = 'kcp_payco'
    kcp_creditcard = 'kcp_creditcard'
    wechatpaySDK = 'wechatpaySDK'
    wechatpayQR = 'wechatpayQR'
    wechatpayWeb = 'wechatpayWeb'
    molpay_boost = 'molpay_boost'
    wallet_IN = 'wallet_IN'
    payu_IN_cashcard = 'payu_IN_cashcard'
    payu_IN_nb = 'payu_IN_nb'
    upi_qr = 'upi_qr'
    paytm = 'paytm'
    molpay_ebanking_VN = 'molpay_ebanking_VN'
    paybybank = 'paybybank'
    ebanking_FI = 'ebanking_FI'
    molpay_ebanking_MY = 'molpay_ebanking_MY'
    molpay_ebanking_direct_MY = 'molpay_ebanking_direct_MY'
    swish = 'swish'
    walley = 'walley'
    walley_b2b = 'walley_b2b'
    pix = 'pix'
    bizum = 'bizum'
    alma = 'alma'
    molpay_fpx = 'molpay_fpx'
    konbini = 'konbini'
    directEbanking = 'directEbanking'
    boletobancario = 'boletobancario'
    neteller = 'neteller'
    dana = 'dana'
    paysafecard = 'paysafecard'
    cashticket = 'cashticket'
    ikano = 'ikano'
    karenmillen = 'karenmillen'
    oasis = 'oasis'
    warehouse = 'warehouse'
    primeiropay_boleto = 'primeiropay_boleto'
    mada = 'mada'
    benefit = 'benefit'
    knet = 'knet'
    omannet = 'omannet'
    gopay_wallet = 'gopay_wallet'
    poli = 'poli'
    kcp_naverpay = 'kcp_naverpay'
    onlinebanking_IN = 'onlinebanking_IN'
    fawry = 'fawry'
    atome = 'atome'
    moneybookers = 'moneybookers'
    naps = 'naps'
    nordea = 'nordea'
    boletobancario_bradesco = 'boletobancario_bradesco'
    boletobancario_itau = 'boletobancario_itau'
    boletobancario_santander = 'boletobancario_santander'
    boletobancario_bancodobrasil = 'boletobancario_bancodobrasil'
    boletobancario_hsbc = 'boletobancario_hsbc'
    molpay_maybank2u = 'molpay_maybank2u'
    molpay_cimb = 'molpay_cimb'
    molpay_rhb = 'molpay_rhb'
    molpay_amb = 'molpay_amb'
    molpay_hlb = 'molpay_hlb'
    molpay_affin_epg = 'molpay_affin_epg'
    molpay_bankislam = 'molpay_bankislam'
    molpay_publicbank = 'molpay_publicbank'
    fpx_agrobank = 'fpx_agrobank'
    touchngo = 'touchngo'
    maybank2u_mae = 'maybank2u_mae'
    duitnow = 'duitnow'
    promptpay = 'promptpay'
    alipay_hk = 'alipay_hk'
    alipay_hk_web = 'alipay_hk_web'
    alipay_hk_wap = 'alipay_hk_wap'
    alipay_wap = 'alipay_wap'
    balanceplatform = 'balanceplatform'


class PaymentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    type: Optional[Type34] = Field(None, description='The payment method type.')


class ResultCode3(Enum):
    AuthenticationFinished = 'AuthenticationFinished'
    AuthenticationNotRequired = 'AuthenticationNotRequired'
    Authorised = 'Authorised'
    Cancelled = 'Cancelled'
    ChallengeShopper = 'ChallengeShopper'
    Error = 'Error'
    IdentifyShopper = 'IdentifyShopper'
    Pending = 'Pending'
    PresentToShopper = 'PresentToShopper'
    Received = 'Received'
    RedirectShopper = 'RedirectShopper'
    Refused = 'Refused'
    Success = 'Success'


class EntityType(Enum):
    NaturalPerson = 'NaturalPerson'
    CompanyName = 'CompanyName'


class Status4(Enum):
    active = 'active'
    completed = 'completed'
    expired = 'expired'
    paid = 'paid'
    paymentPending = 'paymentPending'


class PaymentMethodGroup(BaseModel):
    name: Optional[str] = Field(None, description='The name of the group.')
    paymentMethodData: Optional[str] = Field(
        None,
        description='Echo data to be used if the payment method is displayed as part of this group.',
    )
    type: Optional[str] = Field(None, description='The unique code of the group.')


class PaymentMethodIssuer(BaseModel):
    disabled: Optional[bool] = Field(
        False,
        description='A boolean value indicating whether this issuer is unavailable. Can be `true` whenever the issuer is offline.',
    )
    id: str = Field(
        ...,
        description='The unique identifier of this issuer, to submit in requests to /payments.',
    )
    name: str = Field(..., description='A localized name of the issuer.')


class PaymentMethodsRequest(BaseModel):
    additionalData: Optional[
        Union[
            AdditionalData3DSecure,
            AdditionalDataAirline,
            AdditionalDataCarRental,
            AdditionalDataCommon,
            AdditionalDataLevel23,
            AdditionalDataLodging,
            AdditionalDataOpenInvoice,
            AdditionalDataOpi,
            AdditionalDataRatepay,
            AdditionalDataRetry,
            AdditionalDataRisk,
            AdditionalDataRiskStandalone,
            AdditionalDataSubMerchant,
            AdditionalDataTemporaryServices,
            AdditionalDataWallets,
        ]
    ] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.',
    )
    allowedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"allowedPaymentMethods":["ideal","giropay"]`',
    )
    amount: Optional[Amount] = Field(
        None,
        description='The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).',
    )
    blockedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"blockedPaymentMethods":["ideal","giropay"]`',
    )
    channel: Optional[Channel] = Field(
        None,
        description='The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values:\n* iOS\n* Android\n* Web',
    )
    countryCode: Optional[str] = Field(None, description="The shopper's country code.")
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    order: Optional[EncryptedOrderData] = Field(
        None, description='The order information required for partial payments.'
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The combination of a language code and a country code to specify the language to be used in the payment.',
    )
    shopperReference: Optional[str] = Field(
        None,
        description='Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    splitCardFundingSources: Optional[bool] = Field(
        False,
        description='Boolean value indicating whether the card payment method should be split into separate debit and credit options.',
    )
    store: Optional[constr(min_length=1, max_length=16)] = Field(
        None,
        description='The ecommerce or point-of-sale store that is processing the payment. Used in [partner model integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for Adyen for Platforms.',
    )


class Status5(Enum):
    received = 'received'


class PaymentReversalResource(BaseModel):
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    paymentPspReference: str = Field(
        ...,
        description='The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to reverse. ',
    )
    pspReference: str = Field(
        ...,
        description="Adyen's 16-character reference associated with the reversal request.",
    )
    reference: Optional[str] = Field(
        None, description='Your reference for the reversal request.'
    )
    status: Status5 = Field(
        ...,
        description='The status of your request. This will always have the value **received**.',
    )


class PaymentVerificationRequest(BaseModel):
    payload: constr(max_length=40000) = Field(
        ...,
        description='Encrypted and signed payment result data. You should receive this value from the Checkout SDK after the shopper completes the payment.',
    )


class Phone(BaseModel):
    cc: Optional[constr(min_length=1, max_length=3)] = Field(
        None, description='Country code. Length: 1–3 characters.'
    )
    subscriber: Optional[constr(max_length=15)] = Field(
        None, description='Subscriber number. Maximum length: 15 characters.'
    )


class Behavior(Enum):
    deductAccordingToSplitRatio = 'deductAccordingToSplitRatio'
    deductFromLiableAccount = 'deductFromLiableAccount'
    deductFromOneBalanceAccount = 'deductFromOneBalanceAccount'


class PlatformChargebackLogic(BaseModel):
    behavior: Optional[Behavior] = None
    costAllocationAccount: Optional[str] = None
    targetAccount: Optional[str] = None


class Type35(Enum):
    ratepay = 'ratepay'
    ratepay_directdebit = 'ratepay_directdebit'


class RatepayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    billingAddress: Optional[str] = Field(
        None, description='The address where to send the invoice.'
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    deliveryAddress: Optional[str] = Field(
        None, description='The address where the goods should be delivered.'
    )
    personalDetails: Optional[str] = Field(
        None,
        description='Shopper name, date of birth, phone number, and email address.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Type35 = Field(..., description='**ratepay**')


class Contract(Enum):
    ONECLICK = 'ONECLICK'
    RECURRING = 'RECURRING'
    PAYOUT = 'PAYOUT'


class TokenService(Enum):
    VISATOKENSERVICE = 'VISATOKENSERVICE'
    MCTOKENSERVICE = 'MCTOKENSERVICE'


class Recurring(BaseModel):
    contract: Optional[Contract] = Field(
        None,
        description='The type of recurring contract to be used.\nPossible values:\n* `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).\n* `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).\n* `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.\n* `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).',
    )
    recurringDetailName: Optional[str] = Field(
        None, description='A descriptive name for this detail.'
    )
    recurringExpiry: Optional[datetime] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Only for 3D Secure 2.',
    )
    recurringFrequency: Optional[str] = Field(
        None,
        description='Minimum number of days between authorisations. Only for 3D Secure 2.',
    )
    tokenService: Optional[TokenService] = Field(
        None, description='The name of the token service.'
    )


class ResponseAdditionalData3DSecure(BaseModel):
    cardHolderInfo: Optional[str] = Field(
        None,
        description='Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. ',
    )
    cavv: Optional[str] = Field(
        None,
        description='The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.',
    )
    cavvAlgorithm: Optional[str] = Field(None, description='The CAVV algorithm used.')
    scaExemptionRequested: Optional[str] = Field(
        None,
        description='Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.\n\n Possible values:\n* **lowValue** \n* **secureCorporate** \n* **trustedBeneficiary** \n* **transactionRiskAnalysis** ',
    )
    threeds2_cardEnrolled: Optional[bool] = Field(
        None,
        alias='threeds2.cardEnrolled',
        description='Indicates whether a card is enrolled for 3D Secure 2.',
    )


class ResponseAdditionalDataBillingAddress(BaseModel):
    billingAddress_city: Optional[str] = Field(
        None,
        alias='billingAddress.city',
        description='The billing address city passed in the payment request.',
    )
    billingAddress_country: Optional[str] = Field(
        None,
        alias='billingAddress.country',
        description='The billing address country passed in the payment request.\n\nExample: NL',
    )
    billingAddress_houseNumberOrName: Optional[str] = Field(
        None,
        alias='billingAddress.houseNumberOrName',
        description='The billing address house number or name passed in the payment request.',
    )
    billingAddress_postalCode: Optional[str] = Field(
        None,
        alias='billingAddress.postalCode',
        description='The billing address postal code passed in the payment request.\n\nExample: 1011 DJ',
    )
    billingAddress_stateOrProvince: Optional[str] = Field(
        None,
        alias='billingAddress.stateOrProvince',
        description='The billing address state or province passed in the payment request.\n\nExample: NH',
    )
    billingAddress_street: Optional[str] = Field(
        None,
        alias='billingAddress.street',
        description='The billing address street passed in the payment request.',
    )


class ResponseAdditionalDataCard(BaseModel):
    cardBin: Optional[str] = Field(
        None,
        description='The first six digits of the card number.\n\nThis is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.\n\nExample: 521234',
    )
    cardHolderName: Optional[str] = Field(
        None, description='The cardholder name passed in the payment request.'
    )
    cardIssuingBank: Optional[str] = Field(
        None,
        description='The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.',
    )
    cardIssuingCountry: Optional[str] = Field(
        None, description='The country where the card was issued.\n\nExample: US'
    )
    cardIssuingCurrency: Optional[str] = Field(
        None,
        description='The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard. \n\nExample: USD',
    )
    cardPaymentMethod: Optional[str] = Field(
        None,
        description='The card payment method used for the transaction.\n\nExample: amex',
    )
    cardSummary: Optional[str] = Field(
        None,
        description='The last four digits of a card number.\n\n> Returned only in case of a card payment.',
    )
    issuerBin: Optional[str] = Field(
        None,
        description='The first eight digits of the card number. Only returned if the card number is 16 digits or more.\n\nThis is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.\n\nExample: 52123423',
    )


class FraudResultType(Enum):
    GREEN = 'GREEN'
    FRAUD = 'FRAUD'


class ResponseAdditionalDataCommon(BaseModel):
    acquirerAccountCode: Optional[str] = Field(
        None,
        description='The name of the Adyen acquirer account.\n\nExample: PayPalSandbox_TestAcquirer\n\n> Only relevant for PayPal transactions.',
    )
    acquirerCode: Optional[str] = Field(
        None,
        description='The name of the acquirer processing the payment request.\n\nExample: TestPmmAcquirer',
    )
    acquirerReference: Optional[str] = Field(
        None,
        description='The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.\n\nExample: 7C9N3FNBKT9',
    )
    alias: Optional[str] = Field(
        None, description='The Adyen alias of the card.\n\nExample: H167852639363479'
    )
    aliasType: Optional[str] = Field(
        None, description='The type of the card alias.\n\nExample: Default'
    )
    authCode: Optional[str] = Field(
        None,
        description='Authorisation code:\n* When the payment is authorised successfully, this field holds the authorisation code for the payment.\n* When the payment is not authorised, this field is empty.\n\nExample: 58747',
    )
    authorisationMid: Optional[str] = Field(
        None, description='Merchant ID known by the acquirer.'
    )
    authorisedAmountCurrency: Optional[str] = Field(
        None,
        description='The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    authorisedAmountValue: Optional[str] = Field(
        None,
        description='Value of the amount authorised.\n\nThis amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).',
    )
    avsResult: Optional[str] = Field(
        None,
        description='The AVS result code of the payment, which provides information about the outcome of the AVS check.\n\nFor possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).',
    )
    avsResultRaw: Optional[str] = Field(
        None,
        description='Raw AVS result received from the acquirer, where available.\n\nExample: D',
    )
    bic: Optional[str] = Field(
        None,
        description='BIC of a bank account.\n\nExample: TESTNL01\n\n> Only relevant for SEPA Direct Debit transactions.',
    )
    coBrandedWith: Optional[str] = Field(
        None, description='Includes the co-branded card information.'
    )
    cvcResult: Optional[str] = Field(
        None, description='The result of CVC verification.', examples=['1 Matches']
    )
    cvcResultRaw: Optional[str] = Field(
        None, description='The raw result of CVC verification.', examples=['M']
    )
    dsTransID: Optional[str] = Field(
        None,
        description='Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.',
    )
    eci: Optional[str] = Field(
        None,
        description='The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.\n\nExample: 02',
    )
    expiryDate: Optional[str] = Field(
        None,
        description='The expiry date on the card.\n\nExample: 6/2016\n\n> Returned only in case of a card payment.',
    )
    extraCostsCurrency: Optional[str] = Field(
        None,
        description='The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.\n\nExample: EUR',
    )
    extraCostsValue: Optional[str] = Field(
        None,
        description='The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.',
    )
    fraudCheck__itemNr___FraudCheckname_: Optional[str] = Field(
        None,
        alias='fraudCheck-[itemNr]-[FraudCheckname]',
        description='The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.',
    )
    fraudManualReview: Optional[str] = Field(
        None, description='Indicates if the payment is sent to manual review.'
    )
    fraudResultType: Optional[FraudResultType] = Field(
        None, description='The fraud result properties of the payment.'
    )
    fundingSource: Optional[str] = Field(
        None,
        description="Information regarding the funding type of the card. The possible return values are:\n* CHARGE\n* CREDIT\n* DEBIT\n* PREPAID\n* PREPAID_RELOADABLE\n\n* PREPAID_NONRELOADABLE\n* DEFFERED_DEBIT\n\n> This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.\n\nFor receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.",
    )
    fundsAvailability: Optional[str] = Field(
        None,
        description='Indicates availability of funds.\n\nVisa:\n* "I" (fast funds are supported)\n* "N" (otherwise)\n\nMastercard:\n* "I" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list)\n* "N" (otherwise)\n\n> Returned when you verify a card BIN or estimate costs, and only if payoutEligible is "Y" or "D".',
    )
    inferredRefusalReason: Optional[str] = Field(
        None,
        description='Provides the more granular indication of why a transaction was refused. When a transaction fails with either "Refused", "Restricted Card", "Transaction Not Permitted", "Not supported" or "DeclinedNon Generic" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to "Not Supported".\n\nPossible values:\n\n* 3D Secure Mandated\n* Closed Account\n* ContAuth Not Supported\n* CVC Mandated\n* Ecommerce Not Allowed\n* Crossborder Not Supported\n* Card Updated\n\n* Low Authrate Bin\n* Non-reloadable prepaid card',
    )
    isCardCommercial: Optional[str] = Field(
        None, description='Indicates if the card is used for business purposes only.'
    )
    issuerCountry: Optional[str] = Field(
        None,
        description='The issuing country of the card based on the BIN list that Adyen maintains.\n\nExample: JP',
    )
    liabilityShift: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether a liability shift was offered for this payment.',
    )
    mcBankNetReferenceNumber: Optional[str] = Field(
        None,
        description='The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.\n\n> Contact Support Team to enable this field.',
    )
    merchantAdviceCode: Optional[str] = Field(
        None,
        description='The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.\n\nFor more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).',
    )
    merchantReference: Optional[str] = Field(
        None, description='The reference provided for the transaction.'
    )
    networkTxReference: Optional[str] = Field(
        None,
        description='Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.\n\nThis contains either the Mastercard Trace ID or the Visa Transaction ID.',
    )
    ownerName: Optional[str] = Field(
        None,
        description='The owner name of a bank account.\n\nOnly relevant for SEPA Direct Debit transactions.',
    )
    paymentAccountReference: Optional[str] = Field(
        None,
        description='The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.',
    )
    paymentMethod: Optional[str] = Field(
        None, description='The payment method used in the transaction.'
    )
    paymentMethodVariant: Optional[str] = Field(
        None,
        description='The Adyen sub-variant of the payment method used for the payment request.\n\nFor more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).\n\nExample: mcpro',
    )
    payoutEligible: Optional[str] = Field(
        None,
        description='Indicates whether a payout is eligible or not for this card.\n\nVisa:\n* "Y"\n* "N"\n\nMastercard:\n* "Y" (domestic and cross-border)\n\n* "D" (only domestic)\n* "N" (no MoneySend)\n* "U" (unknown)',
    )
    realtimeAccountUpdaterStatus: Optional[str] = Field(
        None,
        description='The response code from the Real Time Account Updater service.\n\nPossible return values are:\n* CardChanged\n* CardExpiryChanged\n* CloseAccount\n\n* ContactCardAccountHolder',
    )
    receiptFreeText: Optional[str] = Field(
        None, description='Message to be displayed on the terminal.'
    )
    recurring_contractTypes: Optional[str] = Field(
        None,
        alias='recurring.contractTypes',
        description='The recurring contract types applicable to the transaction.',
    )
    recurring_firstPspReference: Optional[str] = Field(
        None,
        alias='recurring.firstPspReference',
        description="The `pspReference`, of the first recurring payment that created the recurring detail.\n\nThis functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.",
    )
    recurring_recurringDetailReference: Optional[str] = Field(
        None,
        alias='recurring.recurringDetailReference',
        description='The reference that uniquely identifies the recurring transaction.',
    )
    recurring_shopperReference: Optional[str] = Field(
        None,
        alias='recurring.shopperReference',
        description='The provided reference of the shopper for a recurring transaction.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None, description='The processing model used for the recurring transaction.'
    )
    referred: Optional[str] = Field(
        None,
        description='If the payment is referred, this field is set to true.\n\nThis field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.\n\nExample: true',
    )
    refusalReasonRaw: Optional[str] = Field(
        None,
        description='Raw refusal reason received from the acquirer, where available.\n\nExample: AUTHORISED',
    )
    requestAmount: Optional[str] = Field(
        None, description='The amount of the payment request.'
    )
    requestCurrencyCode: Optional[str] = Field(
        None, description='The currency of the payment request.'
    )
    shopperInteraction: Optional[str] = Field(
        None,
        description='The shopper interaction type of the payment request.\n\nExample: Ecommerce',
    )
    shopperReference: Optional[str] = Field(
        None,
        description='The shopperReference passed in the payment request.\n\nExample: AdyenTestShopperXX',
    )
    terminalId: Optional[str] = Field(
        None,
        description='The terminal ID used in a point-of-sale payment.\n\nExample: 06022622',
    )
    threeDAuthenticated: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether 3DS authentication was completed on this payment.\n\nExample: true',
    )
    threeDAuthenticatedResponse: Optional[str] = Field(
        None,
        description='The raw 3DS authentication result from the card issuer.\n\nExample: N',
    )
    threeDOffered: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether 3DS was offered for this payment.\n\nExample: true',
    )
    threeDOfferedResponse: Optional[str] = Field(
        None,
        description='The raw enrollment result from the 3DS directory services of the card schemes.\n\nExample: Y',
    )
    threeDSVersion: Optional[str] = Field(None, description='The 3D Secure 2 version.')
    visaTransactionId: Optional[str] = Field(
        None,
        description='The `visaTransactionId`, has a fixed length of 15 numeric characters.\n\n> Contact Support Team to enable this field.',
    )
    xid: Optional[str] = Field(
        None,
        description="The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.\n\nExample: ODgxNDc2MDg2MDExODk5MAAAAAA=",
    )


class ResponseAdditionalDataInstallments(BaseModel):
    installmentPaymentData_installmentType: Optional[str] = Field(
        None,
        alias='installmentPaymentData.installmentType',
        description='Type of installment. The value of `installmentType` should be **IssuerFinanced**.',
    )
    installmentPaymentData_option_itemNr__annualPercentageRate: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].annualPercentageRate',
        description='Annual interest rate.',
    )
    installmentPaymentData_option_itemNr__firstInstallmentAmount: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].firstInstallmentAmount',
        description='First Installment Amount in minor units.',
    )
    installmentPaymentData_option_itemNr__installmentFee: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].installmentFee',
        description='Installment fee amount in minor units.',
    )
    installmentPaymentData_option_itemNr__interestRate: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].interestRate',
        description='Interest rate for the installment period.',
    )
    installmentPaymentData_option_itemNr__maximumNumberOfInstallments: Optional[str] = (
        Field(
            None,
            alias='installmentPaymentData.option[itemNr].maximumNumberOfInstallments',
            description='Maximum number of installments possible for this payment.',
        )
    )
    installmentPaymentData_option_itemNr__minimumNumberOfInstallments: Optional[str] = (
        Field(
            None,
            alias='installmentPaymentData.option[itemNr].minimumNumberOfInstallments',
            description='Minimum number of installments possible for this payment.',
        )
    )
    installmentPaymentData_option_itemNr__numberOfInstallments: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].numberOfInstallments',
        description='Total number of installments possible for this payment.',
    )
    installmentPaymentData_option_itemNr__subsequentInstallmentAmount: Optional[str] = (
        Field(
            None,
            alias='installmentPaymentData.option[itemNr].subsequentInstallmentAmount',
            description='Subsequent Installment Amount in minor units.',
        )
    )
    installmentPaymentData_option_itemNr__totalAmountDue: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].totalAmountDue',
        description='Total amount in minor units.',
    )
    installmentPaymentData_paymentOptions: Optional[str] = Field(
        None,
        alias='installmentPaymentData.paymentOptions',
        description='Possible values:\n* PayInInstallmentsOnly\n* PayInFullOnly\n* PayInFullOrInstallments',
    )
    installments_value: Optional[str] = Field(
        None,
        alias='installments.value',
        description='The number of installments that the payment amount should be charged with.\n\nExample: 5\n> Only relevant for card payments in countries that support installments.',
    )


class ResponseAdditionalDataNetworkTokens(BaseModel):
    networkToken_available: Optional[str] = Field(
        None,
        alias='networkToken.available',
        description='Indicates whether a network token is available for the specified card.',
    )
    networkToken_bin: Optional[str] = Field(
        None,
        alias='networkToken.bin',
        description='The Bank Identification Number of a tokenized card, which is the first six digits of a card number.',
    )
    networkToken_tokenSummary: Optional[str] = Field(
        None,
        alias='networkToken.tokenSummary',
        description='The last four digits of a network token.',
    )


class ResponseAdditionalDataOpi(BaseModel):
    opi_transToken: Optional[str] = Field(
        None,
        alias='opi.transToken',
        description='Returned in the response if you included `opi.includeTransToken: true` in an ecommerce payment request. This contains an Oracle Payment Interface token that you can store in your Oracle Opera database to identify tokenized ecommerce transactions. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).',
    )


class ResponseAdditionalDataSepa(BaseModel):
    sepadirectdebit_dateOfSignature: Optional[str] = Field(
        None,
        alias='sepadirectdebit.dateOfSignature',
        description='The transaction signature date.\n\nFormat: yyyy-MM-dd',
    )
    sepadirectdebit_mandateId: Optional[str] = Field(
        None,
        alias='sepadirectdebit.mandateId',
        description='Its value corresponds to the pspReference value of the transaction.',
    )
    sepadirectdebit_sequenceType: Optional[str] = Field(
        None,
        alias='sepadirectdebit.sequenceType',
        description='This field can take one of the following values:\n* OneOff: (OOFF) Direct debit instruction to initiate exactly one direct debit transaction.\n\n* First: (FRST) Initial/first collection in a series of direct debit instructions.\n* Recurring: (RCUR) Direct debit instruction to carry out regular direct debit transactions initiated by the creditor.\n* Final: (FNAL) Last/final collection in a series of direct debit instructions.\n\nExample: OOFF',
    )


class ResponsePaymentMethod(BaseModel):
    brand: Optional[str] = Field(
        None,
        description='The card brand that the shopper used to pay. Only returned if `paymentMethod.type` is **scheme**.',
    )
    type: Optional[str] = Field(
        None, description='The `paymentMethod.type` value used in the request.'
    )


class RiskData(BaseModel):
    clientData: Optional[str] = Field(
        None,
        description='Contains client-side data, like the device fingerprint, cookies, and specific browser settings.',
    )
    customFields: Optional[Dict[str, str]] = Field(
        None,
        description='Any custom fields used as part of the input to configured risk rules.',
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    profileReference: Optional[str] = Field(
        None,
        description="The risk profile to assign to this payment. When left empty, the merchant-level account's default risk profile will be applied.",
    )


class SDKEphemPubKey(BaseModel):
    crv: Optional[str] = Field(
        None, description='The `crv` value as received from the 3D Secure 2 SDK.'
    )
    kty: Optional[str] = Field(
        None, description='The `kty` value as received from the 3D Secure 2 SDK.'
    )
    x: Optional[str] = Field(
        None, description='The `x` value as received from the 3D Secure 2 SDK.'
    )
    y: Optional[str] = Field(
        None, description='The `y` value as received from the 3D Secure 2 SDK.'
    )


class Type36(Enum):
    samsungpay = 'samsungpay'


class SamsungPayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None,
        description='The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    samsungPayToken: str = Field(
        ..., description='The payload you received from the Samsung Pay SDK response.'
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type36] = Field('samsungpay', description='**samsungpay**')


class Type37(Enum):
    sepadirectdebit = 'sepadirectdebit'
    sepadirectdebit_amazonpay = 'sepadirectdebit_amazonpay'


class SepaDirectDebitDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    iban: str = Field(..., description='The International Bank Account Number (IBAN).')
    ownerName: str = Field(..., description='The name of the bank account holder.')
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type37] = Field('sepadirectdebit', description='**sepadirectdebit**')


class ServiceError(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first. Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    errorCode: Optional[str] = Field(
        None, description='The error code mapped to the error message.'
    )
    errorType: Optional[str] = Field(None, description='The category of the error.')
    message: Optional[str] = Field(
        None, description='A short explanation of the issue.'
    )
    pspReference: Optional[str] = Field(
        None, description='The PSP reference of the payment.'
    )
    status: Optional[int] = Field(None, description='The HTTP response status.')


class ServiceError2(BaseModel):
    errorCode: Optional[str] = None
    errorType: Optional[str] = None
    message: Optional[str] = None
    pspReference: Optional[str] = None


class BillingAddress(Enum):
    editable = 'editable'
    hidden = 'hidden'
    readOnly = 'readOnly'


class DeliveryAddress(Enum):
    editable = 'editable'
    hidden = 'hidden'
    readOnly = 'readOnly'


class PersonalDetails(Enum):
    editable = 'editable'
    hidden = 'hidden'
    readOnly = 'readOnly'


class ShopperInput(BaseModel):
    billingAddress: Optional[BillingAddress] = Field(
        None,
        description='Specifies visibility of billing address fields.\n\nPermitted values:\n* editable\n* hidden\n* readOnly',
    )
    deliveryAddress: Optional[DeliveryAddress] = Field(
        None,
        description='Specifies visibility of delivery address fields.\n\nPermitted values:\n* editable\n* hidden\n* readOnly',
    )
    personalDetails: Optional[PersonalDetails] = Field(
        None,
        description='Specifies visibility of personal details.\n\nPermitted values:\n* editable\n* hidden\n* readOnly',
    )


class ShopperInteractionDevice(BaseModel):
    locale: Optional[str] = Field(
        None, description='Locale on the shopper interaction device.'
    )
    os: Optional[str] = Field(
        None, description='Operating system running on the shopper interaction device.'
    )
    osVersion: Optional[str] = Field(
        None,
        description='Version of the operating system on the shopper interaction device.',
    )


class Type38(Enum):
    BalanceAccount = 'BalanceAccount'
    Commission = 'Commission'
    Default = 'Default'
    MarketPlace = 'MarketPlace'
    PaymentFee = 'PaymentFee'
    Remainder = 'Remainder'
    Surcharge = 'Surcharge'
    Tip = 'Tip'
    VAT = 'VAT'
    Verification = 'Verification'


class SplitAmount(BaseModel):
    currency: Optional[constr(min_length=3, max_length=3)] = Field(
        None,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).\n\nIf this value is not provided, the currency in which the payment is made will be used.',
    )
    value: int = Field(
        ...,
        description='The amount in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )


class StandalonePaymentCancelResource(BaseModel):
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    paymentReference: str = Field(
        ...,
        description='The [`reference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_reference) of the payment to cancel.',
    )
    pspReference: str = Field(
        ...,
        description="Adyen's 16-character reference associated with the cancel request.",
    )
    reference: Optional[str] = Field(
        None, description='Your reference for the cancel request.'
    )
    status: Status5 = Field(
        ...,
        description='The status of your request. This will always have the value **received**.',
    )


class StoredDetails(BaseModel):
    bank: Optional[BankAccount] = Field(None, description='The stored bank account.')
    card: Optional[Card] = Field(None, description='The stored card information.')
    emailAddress: Optional[str] = Field(
        None, description='The email associated with stored payment details.'
    )


class StoredPaymentMethod(BaseModel):
    brand: Optional[str] = Field(None, description='The brand of the card.')
    expiryMonth: Optional[str] = Field(None, description='The month the card expires.')
    expiryYear: Optional[str] = Field(
        None,
        description='The last two digits of the year the card expires. For example, **22** for the year 2022.',
    )
    holderName: Optional[str] = Field(
        None, description='The unique payment method code.'
    )
    iban: Optional[str] = Field(None, description='The IBAN of the bank account.')
    id: Optional[str] = Field(
        None, description='A unique identifier of this stored payment method.'
    )
    lastFour: Optional[str] = Field(
        None, description='The last four digits of the PAN.'
    )
    name: Optional[str] = Field(
        None, description='The display name of the stored payment method.'
    )
    networkTxReference: Optional[str] = Field(
        None,
        description='Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.\n\nThis contains either the Mastercard Trace ID or the Visa Transaction ID.',
    )
    ownerName: Optional[str] = Field(
        None, description='The name of the bank account holder.'
    )
    shopperEmail: Optional[str] = Field(
        None, description='The shopper’s email address.'
    )
    supportedRecurringProcessingModels: Optional[List[str]] = Field(
        None,
        description='The supported recurring processing models for this stored payment method.',
    )
    supportedShopperInteractions: Optional[List[str]] = Field(
        None,
        description='The supported shopper interactions for this stored payment method.',
    )
    type: Optional[str] = Field(None, description='The type of payment method.')


class Type39(Enum):
    bcmc_mobile = 'bcmc_mobile'
    bcmc_mobile_QR = 'bcmc_mobile_QR'
    bcmc_mobile_app = 'bcmc_mobile_app'
    momo_wallet = 'momo_wallet'
    momo_wallet_app = 'momo_wallet_app'
    twint = 'twint'
    paymaya_wallet = 'paymaya_wallet'
    grabpay_SG = 'grabpay_SG'
    grabpay_MY = 'grabpay_MY'
    grabpay_TH = 'grabpay_TH'
    grabpay_ID = 'grabpay_ID'
    grabpay_VN = 'grabpay_VN'
    grabpay_PH = 'grabpay_PH'
    oxxo = 'oxxo'
    gcash = 'gcash'
    kakaopay = 'kakaopay'
    truemoney = 'truemoney'
    twint_pos = 'twint_pos'


class StoredPaymentMethodDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type39] = Field(None, description='The payment method type.')


class StoredPaymentMethodResource(BaseModel):
    brand: Optional[str] = Field(None, description='The brand of the card.')
    expiryMonth: Optional[str] = Field(None, description='The month the card expires.')
    expiryYear: Optional[str] = Field(
        None,
        description='The last two digits of the year the card expires. For example, **22** for the year 2022.',
    )
    externalResponseCode: Optional[str] = Field(
        None,
        description='The response code returned by an external system (for example after a provisioning operation).',
    )
    externalTokenReference: Optional[str] = Field(
        None,
        description='The token reference of a linked token in an external system (for example a network token reference).',
    )
    holderName: Optional[str] = Field(
        None, description='The unique payment method code.'
    )
    iban: Optional[str] = Field(None, description='The IBAN of the bank account.')
    id: Optional[str] = Field(
        None, description='A unique identifier of this stored payment method.'
    )
    issuerName: Optional[str] = Field(
        None, description='The name of the issuer of token or card.'
    )
    lastFour: Optional[str] = Field(
        None, description='The last four digits of the PAN.'
    )
    name: Optional[str] = Field(
        None, description='The display name of the stored payment method.'
    )
    networkTxReference: Optional[str] = Field(
        None,
        description='Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.\n\nThis contains either the Mastercard Trace ID or the Visa Transaction ID.',
    )
    ownerName: Optional[str] = Field(
        None, description='The name of the bank account holder.'
    )
    shopperEmail: Optional[str] = Field(
        None, description='The shopper’s email address.'
    )
    shopperReference: Optional[constr(min_length=3, max_length=256)] = Field(
        None,
        description='Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    supportedRecurringProcessingModels: Optional[List[str]] = Field(
        None,
        description="Defines a recurring payment type.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.",
    )
    type: Optional[str] = Field(None, description='The type of payment method.')


class SubInputDetail(BaseModel):
    configuration: Optional[Dict[str, str]] = Field(
        None, description='Configuration parameters for the required input.'
    )
    items: Optional[List[Item]] = Field(
        None, description='In case of a select, the items to choose from.'
    )
    key: Optional[str] = Field(None, description='The value to provide in the result.')
    optional: Optional[bool] = Field(
        None, description='True if this input is optional to provide.'
    )
    type: Optional[str] = Field(None, description='The type of the required input.')
    value: Optional[str] = Field(
        None, description='The value can be pre-filled, if available.'
    )


class SubMerchant(BaseModel):
    city: Optional[str] = Field(
        None,
        description="The city of the sub-merchant's address.\n* Format: Alphanumeric\n* Maximum length: 13 characters",
    )
    country: Optional[str] = Field(
        None,
        description="The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil. \n* Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)\n* Fixed length: 3 characters",
    )
    mcc: Optional[str] = Field(
        None,
        description="The sub-merchant's 4-digit Merchant Category Code (MCC). \n* Format: Numeric\n* Fixed length: 4 digits",
    )
    name: Optional[str] = Field(
        None,
        description='The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement.\n* Format: Alphanumeric\n* Maximum length: 22 characters',
    )
    taxId: Optional[str] = Field(
        None,
        description='The tax ID of the sub-merchant.\n* Format: Numeric\n* Fixed length: 11 digits for the CPF or 14 digits for the CNPJ',
    )


class AcctType(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'


class AddrMatch(Enum):
    Y = 'Y'
    N = 'N'


class ChallengeIndicator(Enum):
    noPreference = 'noPreference'
    requestNoChallenge = 'requestNoChallenge'
    requestChallenge = 'requestChallenge'
    requestChallengeAsMandate = 'requestChallengeAsMandate'


class ThreeDSRequestorChallengeInd(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'
    field_06 = '06'


class TransType(Enum):
    field_01 = '01'
    field_03 = '03'
    field_10 = '10'
    field_11 = '11'
    field_28 = '28'


class TransactionType(Enum):
    goodsOrServicePurchase = 'goodsOrServicePurchase'
    checkAcceptance = 'checkAcceptance'
    accountFunding = 'accountFunding'
    quasiCashTransaction = 'quasiCashTransaction'
    prepaidActivationAndLoad = 'prepaidActivationAndLoad'


class ThreeDS2ResponseData(BaseModel):
    acsChallengeMandated: Optional[str] = None
    acsOperatorID: Optional[str] = None
    acsReferenceNumber: Optional[str] = None
    acsSignedContent: Optional[str] = None
    acsTransID: Optional[str] = None
    acsURL: Optional[str] = None
    authenticationType: Optional[str] = None
    cardHolderInfo: Optional[str] = None
    cavvAlgorithm: Optional[str] = None
    challengeIndicator: Optional[str] = None
    dsReferenceNumber: Optional[str] = None
    dsTransID: Optional[str] = None
    exemptionIndicator: Optional[str] = None
    messageVersion: Optional[str] = None
    riskScore: Optional[str] = None
    sdkEphemPubKey: Optional[str] = None
    threeDSServerTransID: Optional[str] = None
    transStatus: Optional[str] = None
    transStatusReason: Optional[str] = None


class ChallengeCancel(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'
    field_06 = '06'
    field_07 = '07'


class ExemptionIndicator(Enum):
    lowValue = 'lowValue'
    secureCorporate = 'secureCorporate'
    trustedBeneficiary = 'trustedBeneficiary'
    transactionRiskAnalysis = 'transactionRiskAnalysis'


class ThreeDS2Result(BaseModel):
    authenticationValue: Optional[str] = Field(
        None,
        description='The `authenticationValue` value as defined in the 3D Secure 2 specification.',
    )
    cavvAlgorithm: Optional[str] = Field(
        None,
        description='The algorithm used by the ACS to calculate the authentication value, only for Cartes Bancaires integrations.',
    )
    challengeCancel: Optional[ChallengeCancel] = Field(
        None,
        description='Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).',
    )
    challengeIndicator: Optional[ChallengeIndicator] = Field(
        None,
        description='Specifies a preference for receiving a challenge from the issuer.\nAllowed values:\n* `noPreference`\n* `requestNoChallenge`\n* `requestChallenge`\n* `requestChallengeAsMandate`\n',
    )
    dsTransID: Optional[str] = Field(
        None,
        description='The `dsTransID` value as defined in the 3D Secure 2 specification.',
    )
    eci: Optional[str] = Field(
        None, description='The `eci` value as defined in the 3D Secure 2 specification.'
    )
    exemptionIndicator: Optional[ExemptionIndicator] = Field(
        None,
        description='Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied.\nAllowed values:\n* `lowValue`\n* `secureCorporate`\n* `trustedBeneficiary`\n* `transactionRiskAnalysis`\n',
    )
    messageVersion: Optional[str] = Field(
        None,
        description='The `messageVersion` value as defined in the 3D Secure 2 specification.',
    )
    riskScore: Optional[str] = Field(
        None,
        description='Risk score calculated by Cartes Bancaires Directory Server (DS).',
    )
    threeDSServerTransID: Optional[str] = Field(
        None,
        description='The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.',
    )
    timestamp: Optional[str] = Field(
        None, description='The `timestamp` value of the 3D Secure 2 authentication.'
    )
    transStatus: Optional[str] = Field(
        None,
        description='The `transStatus` value as defined in the 3D Secure 2 specification.',
    )
    transStatusReason: Optional[str] = Field(
        None,
        description='Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).',
    )
    whiteListStatus: Optional[str] = Field(
        None,
        description='The `whiteListStatus` value as defined in the 3D Secure 2 specification.',
    )


class DataOnly(Enum):
    false = 'false'
    true = 'true'


class NativeThreeDS(Enum):
    preferred = 'preferred'


class ThreeDSVersion(Enum):
    field_2_1_0 = '2.1.0'
    field_2_2_0 = '2.2.0'


class ThreeDSRequestData(BaseModel):
    challengeWindowSize: Optional[ChallengeWindowSize] = Field(
        None,
        description='Dimensions of the 3DS2 challenge window to be displayed to the cardholder.\n\nPossible values:\n\n* **01** - size of 250x400 \n* **02** - size of 390x400\n* **03** - size of 500x600\n* **04** - size of 600x400\n* **05** - Fullscreen',
    )
    dataOnly: Optional[DataOnly] = Field(None, description='Flag for data only flow.')
    nativeThreeDS: Optional[NativeThreeDS] = Field(
        None,
        description='Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.\n\nPossible values:\n* **preferred**: Use native 3D Secure authentication when available.',
    )
    threeDSVersion: Optional[ThreeDSVersion] = Field(
        None,
        description='The version of 3D Secure to use.\n\nPossible values:\n\n* **2.1.0**\n* **2.2.0**',
    )


class ThreeDSReqAuthMethod(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'
    field_05 = '05'
    field_06 = '06'


class ThreeDSRequestorAuthenticationInfo(BaseModel):
    threeDSReqAuthData: Optional[str] = Field(
        None,
        description='Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.',
    )
    threeDSReqAuthMethod: Optional[ThreeDSReqAuthMethod] = Field(
        None,
        description='Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values:\n* **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest).\n* **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials.\n* **03** — Login to the cardholder account at the 3DS Requestor system using federated ID.\n* **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials.\n* **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication.\n* **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.',
    )
    threeDSReqAuthTimestamp: Optional[constr(min_length=12, max_length=12)] = Field(
        None,
        description='Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM',
    )


class ThreeDSReqPriorAuthMethod(Enum):
    field_01 = '01'
    field_02 = '02'
    field_03 = '03'
    field_04 = '04'


class ThreeDSRequestorPriorAuthenticationInfo(BaseModel):
    threeDSReqPriorAuthData: Optional[str] = Field(
        None,
        description='Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.',
    )
    threeDSReqPriorAuthMethod: Optional[ThreeDSReqPriorAuthMethod] = Field(
        None,
        description='Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor. Allowed values:\n* **01** — Frictionless authentication occurred by ACS.\n* **02** — Cardholder challenge occurred by ACS.\n* **03** — AVS verified.\n* **04** — Other issuer methods.',
    )
    threeDSReqPriorAuthTimestamp: Optional[constr(min_length=12, max_length=12)] = (
        Field(
            None,
            description='Date and time in UTC of the prior cardholder authentication. Format: YYYYMMDDHHMM',
        )
    )
    threeDSReqPriorRef: Optional[constr(min_length=36, max_length=36)] = Field(
        None,
        description='This data element provides additional information to the ACS to determine the best approach for handing a request. This data element contains an ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder. Length: 30 characters.',
    )


class AuthenticationResponse(Enum):
    Y = 'Y'
    N = 'N'
    U = 'U'
    A = 'A'


class DirectoryResponse(Enum):
    A = 'A'
    C = 'C'
    D = 'D'
    I = 'I'
    N = 'N'
    R = 'R'
    U = 'U'
    Y = 'Y'


class ThreeDSecureData(BaseModel):
    authenticationResponse: Optional[AuthenticationResponse] = Field(
        None,
        description='In 3D Secure 1, the authentication response if the shopper was redirected.\n\nIn 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, omit this parameter.',
    )
    cavv: Optional[str] = Field(
        None,
        description='The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).',
    )
    cavvAlgorithm: Optional[str] = Field(
        None, description='The CAVV algorithm used. Include this only for 3D Secure 1.'
    )
    challengeCancel: Optional[ChallengeCancel] = Field(
        None,
        description='Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).',
    )
    directoryResponse: Optional[DirectoryResponse] = Field(
        None,
        description='In 3D Secure 1, this is the enrollment response from the 3D directory server.\n\nIn 3D Secure 2, this is the `transStatus` from the `ARes`.',
    )
    dsTransID: Optional[str] = Field(
        None,
        description='Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.',
    )
    eci: Optional[str] = Field(None, description='The electronic commerce indicator.')
    riskScore: Optional[str] = Field(
        None,
        description='Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.',
    )
    threeDSVersion: Optional[str] = Field(
        None, description='The version of the 3D Secure protocol.'
    )
    tokenAuthenticationVerificationValue: Optional[str] = Field(
        None,
        description='Network token authentication verification value (TAVV). The network token cryptogram.',
    )
    transStatusReason: Optional[str] = Field(
        None,
        description='Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).',
    )
    xid: Optional[str] = Field(
        None,
        description='Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).',
    )


class Status8(Enum):
    expired = 'expired'


class UpdatePaymentLinkRequest(BaseModel):
    status: Status8 = Field(
        ..., description='Status of the payment link. Possible values:\n* **expired**'
    )


class Type40(Enum):
    upi_collect = 'upi_collect'


class UpiCollectDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    billingSequenceNumber: str = Field(
        ...,
        description='The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper.',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    shopperNotificationReference: Optional[str] = Field(
        None,
        description='The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Type40 = Field(..., description='**upi_collect**')
    virtualPaymentAddress: Optional[str] = Field(
        None, description='The virtual payment address for UPI.'
    )


class Type41(Enum):
    upi_intent = 'upi_intent'


class UpiIntentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    shopperNotificationReference: Optional[str] = Field(
        None,
        description='The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Type41 = Field(..., description='**upi_intent**')


class Type42(Enum):
    vipps = 'vipps'


class VippsDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    telephoneNumber: str = Field(..., description='')
    type: Optional[Type42] = Field('vipps', description='**vipps**')


class Type43(Enum):
    visacheckout = 'visacheckout'


class VisaCheckoutDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None,
        description='The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.',
    )
    type: Optional[Type43] = Field('visacheckout', description='**visacheckout**')
    visaCheckoutCallId: str = Field(
        ...,
        description='The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID.',
    )


class Type44(Enum):
    wechatpay = 'wechatpay'
    wechatpay_pos = 'wechatpay_pos'


class WeChatPayDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    type: Optional[Type44] = Field('wechatpay', description='**wechatpay**')


class Type45(Enum):
    wechatpayMiniProgram = 'wechatpayMiniProgram'


class WeChatPayMiniProgramDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    appId: Optional[str] = None
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    openid: Optional[str] = None
    type: Optional[Type45] = Field(
        'wechatpayMiniProgram', description='**wechatpayMiniProgram**'
    )


class Type46(Enum):
    zip = 'zip'
    zip_pos = 'zip_pos'


class ZipDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkoutAttemptId: Optional[str] = Field(
        None, description='The checkout attempt identifier.'
    )
    clickAndCollect: Optional[str] = Field(
        None,
        description='Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them.',
    )
    recurringDetailReference: Optional[str] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    type: Optional[Type46] = Field('zip', description='**zip**')


class ApplicationInfo(BaseModel):
    adyenLibrary: Optional[CommonField] = Field(
        None,
        description='Adyen-developed software, such as libraries and plugins, used to interact with the Adyen API. For example, Magento plugin, Java API library, etc.',
    )
    adyenPaymentSource: Optional[CommonField] = Field(
        None,
        description='Adyen-developed software to get payment details. For example, Checkout SDK, Secured Fields SDK, etc.',
    )
    externalPlatform: Optional[ExternalPlatform] = Field(
        None,
        description='Third-party developed platform used to initiate payment requests. For example, Magento, Zuora, etc.',
    )
    merchantApplication: Optional[CommonField] = Field(
        None,
        description='Merchant developed software, such as cashier application, used to interact with the Adyen API.',
    )
    merchantDevice: Optional[MerchantDevice] = Field(
        None, description='Merchant device information.'
    )
    shopperInteractionDevice: Optional[ShopperInteractionDevice] = Field(
        None,
        description='Shopper interaction device, such as terminal, mobile device or web browser, to initiate payment requests.',
    )


class AuthenticationData(BaseModel):
    attemptAuthentication: Optional[AttemptAuthentication] = Field(
        None,
        description="Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).\n\nPossible values:\n\n* **always**: Perform 3D Secure authentication.\n* **never**: Don't perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.",
    )
    authenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.\nDefault: **false**.',
    )
    threeDSRequestData: Optional[ThreeDSRequestData] = Field(
        None,
        description='Object with additional parameters for the 3D Secure authentication flow.',
    )


class CheckoutBalanceCheckResponse(BaseModel):
    additionalData: Optional[
        Union[
            ResponseAdditionalData3DSecure,
            ResponseAdditionalDataBillingAddress,
            ResponseAdditionalDataCard,
            ResponseAdditionalDataCommon,
            ResponseAdditionalDataInstallments,
            ResponseAdditionalDataNetworkTokens,
            ResponseAdditionalDataOpi,
            ResponseAdditionalDataSepa,
        ]
    ] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    balance: Amount = Field(..., description='The balance for the payment method.')
    fraudResult: Optional[FraudResult] = Field(
        None, description='The fraud result properties of the payment.'
    )
    pspReference: Optional[str] = Field(
        None,
        description="Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.",
    )
    refusalReason: Optional[str] = Field(
        None,
        description="If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
    )
    resultCode: ResultCode = Field(
        ...,
        description='The result of the cancellation request.\n\nPossible values:\n\n* **Success** – Indicates that the balance check was successful.\n* **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount.\n* **Failed** – Indicates that the balance check failed.',
    )
    transactionLimit: Optional[Amount] = Field(
        None,
        description='The maximum spendable balance for a single transaction. Applicable to some gift cards.',
    )


class CheckoutCancelOrderRequest(BaseModel):
    merchantAccount: str = Field(
        ..., description='The merchant account identifier that orderData belongs to.'
    )
    order: EncryptedOrderData = Field(
        ...,
        description='The order request object that contains a pspReference that represents the order and the matching encrypted order data.',
    )


class CheckoutCreateOrderResponse(BaseModel):
    additionalData: Optional[
        Union[
            ResponseAdditionalData3DSecure,
            ResponseAdditionalDataBillingAddress,
            ResponseAdditionalDataCard,
            ResponseAdditionalDataCommon,
            ResponseAdditionalDataInstallments,
            ResponseAdditionalDataNetworkTokens,
            ResponseAdditionalDataOpi,
            ResponseAdditionalDataSepa,
        ]
    ] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    amount: Amount = Field(..., description='The initial amount of the order.')
    expiresAt: str = Field(..., description='The date that the order will expire.')
    fraudResult: Optional[FraudResult] = Field(
        None, description='The fraud result properties of the payment.'
    )
    orderData: str = Field(
        ...,
        description='The encrypted data that will be used by merchant for adding payments to the order.',
    )
    pspReference: Optional[str] = Field(
        None,
        description="Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.",
    )
    reference: Optional[str] = Field(
        None, description='The reference provided by merchant for creating the order.'
    )
    refusalReason: Optional[str] = Field(
        None,
        description="If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
    )
    remainingAmount: Amount = Field(
        ..., description='The remaining amount in the order.'
    )
    resultCode: ResultCode2 = Field(
        ...,
        description='The result of the order creation request.\n The value is always **Success**.',
    )


class Configuration(BaseModel):
    avs: Optional[Avs] = Field(
        None,
        description='Describes the configuration for AVS ([Address Verification System](https://en.wikipedia.org/wiki/Address_Verification_System)).',
    )
    cardHolderName: Optional[CardHolderName] = Field(
        None,
        description='Determines whether the cardholder name should be provided or not.\n\nPermitted values:\n* NONE\n* OPTIONAL\n* REQUIRED',
    )
    installments: Optional[InstallmentsNumber] = Field(
        None,
        description='Describes the configuration for [installment payments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).',
    )
    shopperInput: Optional[ShopperInput] = Field(
        None, description='Determines how to display the details fields.'
    )


class DetailsRequest(BaseModel):
    authenticationData: Optional[DetailsRequestAuthenticationData] = Field(
        None, description='Data for 3DS authentication.'
    )
    details: PaymentCompletionDetails = Field(
        ...,
        description='Use this collection to submit the details that were returned as a result of the `/payments` call.',
    )
    paymentData: Optional[constr(max_length=100000)] = Field(
        None,
        description='The `paymentData` value from the `/payments` response. Required if the `/payments` response returns this value. ',
    )
    threeDSAuthenticationOnly: Optional[bool] = Field(
        None,
        description='Change the `authenticationOnly` indicator originally set in the `/payments` request. Only needs to be set if you want to modify the value set previously.',
    )


class FundOrigin(BaseModel):
    billingAddress: Optional[Address] = Field(
        None, description='The address where to send the invoice.'
    )
    shopperName: Optional[Name] = Field(None, description='The name of the person')


class FundRecipient(BaseModel):
    billingAddress: Optional[Address] = Field(
        None, description='The address where to send the invoice.'
    )
    paymentMethod: Optional[CardDetails] = Field(
        None, description='the used paymentMetohd'
    )
    shopperEmail: Optional[str] = Field(
        None, description='the email address of the person'
    )
    shopperName: Optional[Name] = Field(None, description='the name of the person')
    shopperReference: Optional[constr(min_length=3, max_length=256)] = Field(
        None,
        description='Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    storedPaymentMethodId: Optional[constr(max_length=64)] = Field(
        None,
        description='This is the `recurringDetailReference` returned in the response when you created the token.',
    )
    subMerchant: Optional[SubMerchant] = Field(
        None,
        description='Required for Back-to-Back/ purchase driven load in Wallet transactions.\nContains the final merchant who will be receiving the money, also known as subMerchant, information.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description='the telephone number of the person'
    )
    walletIdentifier: Optional[str] = Field(
        None, description='indicates where the money is going'
    )
    walletOwnerTaxId: Optional[str] = Field(
        None, description='indicates the tax identifier of the fund recepient'
    )


class InputDetail(BaseModel):
    configuration: Optional[Dict[str, str]] = Field(
        None, description='Configuration parameters for the required input.'
    )
    details: Optional[List[SubInputDetail]] = Field(
        None, description='Input details can also be provided recursively.'
    )
    inputDetails: Optional[List[SubInputDetail]] = Field(
        None, description='Input details can also be provided recursively (deprecated).'
    )
    itemSearchUrl: Optional[str] = Field(
        None, description='In case of a select, the URL from which to query the items.'
    )
    items: Optional[List[Item]] = Field(
        None, description='In case of a select, the items to choose from.'
    )
    key: Optional[str] = Field(None, description='The value to provide in the result.')
    optional: Optional[bool] = Field(
        None, description='True if this input value is optional.'
    )
    type: Optional[str] = Field(None, description='The type of the required input.')
    value: Optional[str] = Field(
        None, description='The value can be pre-filled, if available.'
    )


class ListStoredPaymentMethodsResponse(BaseModel):
    merchantAccount: Optional[str] = Field(None, description='Your merchant account.')
    shopperReference: Optional[str] = Field(
        None,
        description='Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    storedPaymentMethods: Optional[List[StoredPaymentMethodResource]] = Field(
        None, description='List of all stored payment methods.'
    )


class PaymentDetailsResponse(BaseModel):
    additionalData: Optional[
        Union[
            ResponseAdditionalData3DSecure,
            ResponseAdditionalDataBillingAddress,
            ResponseAdditionalDataCard,
            ResponseAdditionalDataCommon,
            ResponseAdditionalDataInstallments,
            ResponseAdditionalDataNetworkTokens,
            ResponseAdditionalDataOpi,
            ResponseAdditionalDataSepa,
        ]
    ] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    amount: Optional[Amount] = Field(
        None, description='Authorised amount in the transaction.'
    )
    donationToken: Optional[str] = Field(
        None, description='Donation Token containing payment details for Adyen Giving.'
    )
    fraudResult: Optional[FraudResult] = Field(
        None, description='The fraud result properties of the payment.'
    )
    merchantReference: Optional[str] = Field(
        None, description='The reference used during the /payments request.'
    )
    order: Optional[CheckoutOrderResponse] = Field(
        None,
        description='Contains updated information regarding the order in case order information was provided in the request.',
    )
    paymentMethod: Optional[ResponsePaymentMethod] = Field(
        None,
        description='Details about the payment method used in the transaction. \nOnly returned if `resultCode` is **Authorised**.',
    )
    pspReference: Optional[str] = Field(
        None,
        description="Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.",
    )
    refusalReason: Optional[str] = Field(
        None,
        description="If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
    )
    refusalReasonCode: Optional[str] = Field(
        None,
        description='Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).',
    )
    resultCode: Optional[ResultCode3] = Field(
        None,
        description="The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).\n\nPossible values:\n\n* **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.\n* **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only).\n* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n* **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.\n* **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.\n* **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.\n* **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment.\n* **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.\n* **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.\n* **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.",
    )
    shopperLocale: Optional[str] = Field(None, description='The shopperLocale.')
    threeDS2ResponseData: Optional[ThreeDS2ResponseData] = Field(
        None, description='Response of the 3D Secure 2 authentication.'
    )
    threeDS2Result: Optional[ThreeDS2Result] = Field(
        None, description='Result of the 3D Secure 2 authentication.'
    )
    threeDSPaymentData: Optional[str] = Field(
        None,
        description='When non-empty, contains a value that you must submit to the `/payments/details` endpoint as `paymentData`.',
    )


class PaymentMethod(BaseModel):
    brand: Optional[str] = Field(
        None,
        description='Brand for the selected gift card. For example: plastix, hmclub.',
    )
    brands: Optional[List[str]] = Field(
        None, description='List of possible brands. For example: visa, mc.'
    )
    configuration: Optional[Dict[str, str]] = Field(
        None, description='The configuration of the payment method.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None, description='The funding source of the payment method.'
    )
    group: Optional[PaymentMethodGroup] = Field(
        None, description='The group where this payment method belongs to.'
    )
    inputDetails: Optional[List[InputDetail]] = Field(
        None,
        description='All input details to be provided to complete the payment with this payment method.',
    )
    issuers: Optional[List[PaymentMethodIssuer]] = Field(
        None, description='A list of issuers for this payment method.'
    )
    name: Optional[str] = Field(
        None, description='The displayable name of this payment method.'
    )
    type: Optional[str] = Field(None, description='The unique payment method code.')


class PaymentMethodsResponse(BaseModel):
    paymentMethods: Optional[List[PaymentMethod]] = Field(
        None,
        description='Detailed list of payment methods required to generate payment forms.',
    )
    storedPaymentMethods: Optional[List[StoredPaymentMethod]] = Field(
        None, description='List of all stored payment methods.'
    )


class PaymentResponse(BaseModel):
    action: Optional[
        Union[
            CheckoutAwaitAction,
            CheckoutNativeRedirectAction,
            CheckoutQrCodeAction,
            CheckoutRedirectAction,
            CheckoutSDKAction,
            CheckoutThreeDS2Action,
            CheckoutVoucherAction,
        ]
    ] = Field(None, description='Action to be taken for completing the payment.')
    additionalData: Optional[
        Union[
            ResponseAdditionalData3DSecure,
            ResponseAdditionalDataBillingAddress,
            ResponseAdditionalDataCard,
            ResponseAdditionalDataCommon,
            ResponseAdditionalDataInstallments,
            ResponseAdditionalDataNetworkTokens,
            ResponseAdditionalDataOpi,
            ResponseAdditionalDataSepa,
        ]
    ] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    amount: Optional[Amount] = Field(
        None, description='Authorised amount in the transaction.'
    )
    donationToken: Optional[str] = Field(
        None, description='Donation Token containing payment details for Adyen Giving.'
    )
    fraudResult: Optional[FraudResult] = Field(
        None, description='The fraud result properties of the payment.'
    )
    merchantReference: Optional[str] = Field(
        None,
        description='The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens ("-").\nMaximum length: 80 characters.',
    )
    order: Optional[CheckoutOrderResponse] = Field(
        None,
        description='Contains updated information regarding the order in case order information was provided in the request.',
    )
    paymentMethod: Optional[ResponsePaymentMethod] = Field(
        None,
        description='Details about the payment method used in the transaction. \nOnly returned if `resultCode` is **Authorised**.',
    )
    pspReference: Optional[str] = Field(
        None,
        description="Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.\n\n> For payment methods that require a redirect or additional action, you will get this value in the `/payments/details` response.",
    )
    refusalReason: Optional[str] = Field(
        None,
        description="If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
    )
    refusalReasonCode: Optional[str] = Field(
        None,
        description='Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).',
    )
    resultCode: Optional[ResultCode3] = Field(
        None,
        description="The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).\n\nPossible values:\n\n* **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.\n* **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only).\n* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n* **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.\n* **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.\n* **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.\n* **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment.\n* **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.\n* **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.\n* **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.",
    )
    threeDS2ResponseData: Optional[ThreeDS2ResponseData] = Field(
        None, description='Response of the 3D Secure 2 authentication.'
    )
    threeDS2Result: Optional[ThreeDS2Result] = Field(
        None, description='Result of the 3D Secure 2 authentication.'
    )
    threeDSPaymentData: Optional[str] = Field(
        None,
        description='When non-empty, contains a value that you must submit to the `/payments/details` endpoint as `paymentData`.',
    )


class PaymentVerificationResponse(BaseModel):
    additionalData: Optional[
        Union[
            ResponseAdditionalData3DSecure,
            ResponseAdditionalDataBillingAddress,
            ResponseAdditionalDataCard,
            ResponseAdditionalDataCommon,
            ResponseAdditionalDataInstallments,
            ResponseAdditionalDataNetworkTokens,
            ResponseAdditionalDataOpi,
            ResponseAdditionalDataSepa,
        ]
    ] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    fraudResult: Optional[FraudResult] = Field(
        None, description='The fraud result properties of the payment.'
    )
    merchantReference: str = Field(
        ...,
        description='A unique value that you provided in the initial `/paymentSession` request as a `reference` field.',
    )
    order: Optional[CheckoutOrderResponse] = Field(
        None,
        description='Contains updated information regarding the order in case order information was provided in the request.',
    )
    pspReference: Optional[str] = Field(
        None,
        description="Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.",
    )
    refusalReason: Optional[str] = Field(
        None,
        description="If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
    )
    refusalReasonCode: Optional[str] = Field(
        None,
        description='Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).',
    )
    resultCode: Optional[ResultCode3] = Field(
        None,
        description="The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).\n\nPossible values:\n\n* **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.\n* **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only).\n* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n* **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.\n* **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.\n* **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.\n* **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment.\n* **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.\n* **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.\n* **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.",
    )
    serviceError: Optional[ServiceError2] = Field(
        None, description='The type of the error.'
    )
    shopperLocale: str = Field(
        ..., description='The shopperLocale value provided in the payment request.'
    )


class RecurringDetail(BaseModel):
    brand: Optional[str] = Field(
        None,
        description='Brand for the selected gift card. For example: plastix, hmclub.',
    )
    brands: Optional[List[str]] = Field(
        None, description='List of possible brands. For example: visa, mc.'
    )
    configuration: Optional[Dict[str, str]] = Field(
        None, description='The configuration of the payment method.'
    )
    fundingSource: Optional[FundingSource] = Field(
        None, description='The funding source of the payment method.'
    )
    group: Optional[PaymentMethodGroup] = Field(
        None, description='The group where this payment method belongs to.'
    )
    inputDetails: Optional[List[InputDetail]] = Field(
        None,
        description='All input details to be provided to complete the payment with this payment method.',
    )
    issuers: Optional[List[PaymentMethodIssuer]] = Field(
        None, description='A list of issuers for this payment method.'
    )
    name: Optional[str] = Field(
        None, description='The displayable name of this payment method.'
    )
    recurringDetailReference: Optional[str] = Field(
        None, description='The reference that uniquely identifies the recurring detail.'
    )
    storedDetails: Optional[StoredDetails] = Field(
        None, description='Contains information on previously stored payment details.'
    )
    type: Optional[str] = Field(None, description='The unique payment method code.')


class Split(BaseModel):
    account: Optional[str] = Field(
        None,
        description='Unique identifier of the account where the split amount should be sent. This is required if `type` is **MarketPlace** or **BalanceAccount**.\n\n',
    )
    amount: SplitAmount = Field(..., description='The amount of this split.')
    description: Optional[str] = Field(None, description='A description of this split.')
    reference: Optional[str] = Field(
        None,
        description='Your reference for the split, which you can use to link the split to other operations such as captures and refunds.\n\nThis is required if `type` is **MarketPlace** or **BalanceAccount**. For the other types, we also recommend sending a reference so you can reconcile the split and the associated payment in the transaction overview and in the reports. If the reference is not provided, the split is reported as part of the aggregated [TransferBalance record type](https://docs.adyen.com/reporting/marketpay-payments-accounting-report) in Adyen for Platforms.',
    )
    type: Type38 = Field(
        ...,
        description='The type of split.\nPossible values: **Default**, **PaymentFee**, **VAT**, **Commission**, **MarketPlace**, **BalanceAccount**, **Remainder**, **Surcharge**, **Tip**.',
    )


class ThreeDS2RequestData(BaseModel):
    acctInfo: Optional[AcctInfo] = Field(
        None,
        description='Additional information about the Cardholder’s account provided by the 3DS Requestor.',
    )
    acctType: Optional[AcctType] = Field(
        None,
        description='Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values:\n* **01** — Not applicable\n* **02** — Credit\n* **03** — Debit',
    )
    acquirerBIN: Optional[str] = Field(
        None,
        description='Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.',
    )
    acquirerMerchantID: Optional[str] = Field(
        None,
        description="Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.",
    )
    addrMatch: Optional[AddrMatch] = Field(
        None,
        description='Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values:\n* **Y** — Shipping Address matches Billing Address.\n* **N** — Shipping Address does not match Billing Address.',
    )
    authenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.',
    )
    challengeIndicator: Optional[ChallengeIndicator] = Field(
        None,
        description='Possibility to specify a preference for receiving a challenge from the issuer.\nAllowed values:\n* `noPreference`\n* `requestNoChallenge`\n* `requestChallenge`\n* `requestChallengeAsMandate`\n',
    )
    deviceChannel: str = Field(
        ...,
        description='The environment of the shopper.\nAllowed values:\n* `app`\n* `browser`',
    )
    deviceRenderOptions: Optional[DeviceRenderOptions] = Field(
        None,
        description='Display options for the 3D Secure 2 SDK.\nOptional and only for `deviceChannel` **app**.',
    )
    homePhone: Optional[Phone] = Field(
        None, description='The home phone number provided by the Cardholder.'
    )
    mcc: Optional[str] = Field(
        None,
        description='Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The `mcc` is a four-digit code with which the previously given `acquirerMerchantID` is registered at the scheme.',
    )
    merchantName: Optional[str] = Field(
        None,
        description='Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters.\n> Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.',
    )
    messageVersion: Optional[str] = Field(
        '2.1.0',
        description='The `messageVersion` value indicating the 3D Secure 2 protocol version.',
    )
    mobilePhone: Optional[Phone] = Field(
        None, description='The mobile phone number provided by the Cardholder.'
    )
    notificationURL: Optional[str] = Field(
        None,
        description='URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.',
    )
    payTokenInd: Optional[bool] = Field(
        None,
        description='Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.',
    )
    paymentAuthenticationUseCase: Optional[str] = Field(
        None,
        description='Indicates the type of payment for which an authentication is requested (message extension)',
    )
    purchaseInstalData: Optional[constr(min_length=1, max_length=3)] = Field(
        None,
        description='Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.',
    )
    recurringExpiry: Optional[str] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Format: YYYYMMDD',
    )
    recurringFrequency: Optional[constr(max_length=4)] = Field(
        None,
        description='Indicates the minimum number of days between authorisations. Maximum length: 4 characters.',
    )
    sdkAppID: Optional[str] = Field(
        None,
        description='The `sdkAppID` value as received from the 3D Secure 2 SDK.\nRequired for `deviceChannel` set to **app**.',
    )
    sdkEncData: Optional[str] = Field(
        None,
        description='The `sdkEncData` value as received from the 3D Secure 2 SDK.\nRequired for `deviceChannel` set to **app**.',
    )
    sdkEphemPubKey: Optional[SDKEphemPubKey] = Field(
        None,
        description='The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.\nRequired for `deviceChannel` set to **app**.',
    )
    sdkMaxTimeout: Optional[int] = Field(
        60,
        description='The maximum amount of time in minutes for the 3D Secure 2 authentication process.\nOptional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.',
    )
    sdkReferenceNumber: Optional[str] = Field(
        None,
        description='The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.\nOnly for `deviceChannel` set to **app**.',
    )
    sdkTransID: Optional[str] = Field(
        None,
        description='The `sdkTransID` value as received from the 3D Secure 2 SDK.\nOnly for `deviceChannel` set to **app**.',
    )
    sdkVersion: Optional[str] = Field(
        None,
        description='Version of the 3D Secure 2 mobile SDK. \nOnly for `deviceChannel` set to **app**.',
    )
    threeDSCompInd: Optional[str] = Field(
        None, description='Completion indicator for the device fingerprinting.'
    )
    threeDSRequestorAuthenticationInd: Optional[str] = Field(
        None, description='Indicates the type of Authentication request.'
    )
    threeDSRequestorAuthenticationInfo: Optional[ThreeDSRequestorAuthenticationInfo] = (
        Field(
            None,
            description='Information about how the 3DS Requestor authenticated the cardholder before or during the transaction',
        )
    )
    threeDSRequestorChallengeInd: Optional[ThreeDSRequestorChallengeInd] = Field(
        None,
        description='Indicates whether a challenge is requested for this transaction. Possible values:\n* **01** — No preference\n* **02** — No challenge requested\n* **03** — Challenge requested (3DS Requestor preference)\n* **04** — Challenge requested (Mandate)\n* **05** — No challenge (transactional risk analysis is already performed)\n* **06** — Data Only',
    )
    threeDSRequestorID: Optional[str] = Field(
        None,
        description='Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.',
    )
    threeDSRequestorName: Optional[str] = Field(
        None,
        description='Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.',
    )
    threeDSRequestorPriorAuthenticationInfo: Optional[
        ThreeDSRequestorPriorAuthenticationInfo
    ] = Field(
        None,
        description='Information about how the 3DS Requestor authenticated the cardholder as part of a previous 3DS transaction.',
    )
    threeDSRequestorURL: Optional[str] = Field(
        None,
        description='URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.',
    )
    transType: Optional[TransType] = Field(
        None,
        description='Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values:\n* **01** — Goods/Service Purchase\n* **03** — Check Acceptance\n* **10** — Account Funding\n* **11** — Quasi-Cash Transaction\n* **28** — Prepaid Activation and Load',
    )
    transactionType: Optional[TransactionType] = Field(
        None, description='Identify the type of the transaction being authenticated.'
    )
    whiteListStatus: Optional[str] = Field(
        None,
        description='The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.',
    )
    workPhone: Optional[Phone] = Field(
        None, description='The work phone number provided by the Cardholder.'
    )


class CheckoutBalanceCheckRequest(BaseModel):
    accountInfo: Optional[AccountInfo] = Field(
        None,
        description='Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    additionalAmount: Optional[Amount] = Field(
        None,
        description='If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. ',
    )
    additionalData: Optional[
        Union[
            AdditionalData3DSecure,
            AdditionalDataAirline,
            AdditionalDataCarRental,
            AdditionalDataCommon,
            AdditionalDataLevel23,
            AdditionalDataLodging,
            AdditionalDataOpenInvoice,
            AdditionalDataOpi,
            AdditionalDataRatepay,
            AdditionalDataRetry,
            AdditionalDataRisk,
            AdditionalDataRiskStandalone,
            AdditionalDataSubMerchant,
            AdditionalDataTemporaryServices,
            AdditionalDataWallets,
        ]
    ] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.',
    )
    amount: Optional[Amount] = Field(
        None,
        description='The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).',
    )
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    billingAddress: Optional[Address] = Field(
        None,
        description='The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada.',
    )
    browserInfo: Optional[BrowserInfo] = Field(
        None,
        description="The shopper's browser information.\n> For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.",
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    dccQuote: Optional[ForexQuote] = Field(
        None,
        description='The forex quote as returned in the response of the forex service.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    deliveryDate: Optional[datetime] = Field(
        None,
        description='The date and time the purchased goods should be delivered.\n\nFormat [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\nExample: 2017-07-17T13:42:40.428+01:00',
    )
    deviceFingerprint: Optional[constr(max_length=5000)] = Field(
        None,
        description="A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).",
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    installments: Optional[Installments] = Field(
        None,
        description='Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).',
    )
    localizedShopperStatement: Optional[Dict[str, str]] = Field(
        None,
        description='This field allows merchants to use dynamic shopper statement in local character sets.\nThe local shopper statement field can be supplied in markets where localized merchant descriptors are used. Currently, Adyen only supports this in the Japanese market\n.The available character sets at the moment are:\n* Processing in Japan: **ja-Kana**\nThe character set **ja-Kana** supports UTF-8 based Katakana and alphanumeric and special characters.\nMerchants can use half-width or full-width characters.\nAn example request would be:\n> {\n  "shopperStatement" : "ADYEN - SELLER-A",\n  "localizedShopperStatement" : {\n    "ja-Kana" : "ADYEN - セラーA"\n  }\n}\nWe recommend merchants to always supply the field localizedShopperStatement in addition to the field shopperStatement.It is issuer dependent whether the localized shopper statement field is supported.\nIn the case of non-domestic transactions (e.g. US-issued cards processed in JP) the field `shopperStatement` is used to modify the statement of the shopper.\nAdyen handles the complexity of ensuring the correct descriptors are assigned.\nPlease note, this field can be used for only Visa and Mastercard transactions.',
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.',
    )
    merchantRiskIndicator: Optional[MerchantRiskIndicator] = Field(
        None,
        description='Additional risk fields for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request. When exceeding, the "177" error occurs: "Metadata size exceeds limit".\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. ',
    )
    orderReference: Optional[str] = Field(
        None,
        description='When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.',
    )
    paymentMethod: Dict[str, str] = Field(
        ...,
        description='The collection that contains the type of the payment method and its specific information.',
    )
    recurring: Optional[Recurring] = Field(
        None,
        description='The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None,
        description="Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
    )
    reference: Optional[str] = Field(
        None,
        description='The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens ("-").\nMaximum length: 80 characters.',
    )
    selectedBrand: Optional[str] = Field(
        None,
        description='Some payment methods require defining a value for this field to specify how to process the transaction.\n\nFor the Bancontact payment method, it can be set to:\n* `maestro` (default), to be processed like a Maestro card, or\n* `bcmc`, to be processed like a Bancontact card.',
    )
    selectedRecurringDetailReference: Optional[str] = Field(
        None,
        description='The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.',
    )
    sessionId: Optional[str] = Field(
        None, description='A session ID used to identify a payment session.'
    )
    shopperEmail: Optional[str] = Field(
        None,
        description="The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.\n> For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.",
    )
    shopperIP: Optional[str] = Field(
        None,
        description="The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations.\nThis field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
    )
    shopperInteraction: Optional[ShopperInteraction] = Field(
        None,
        description='Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.',
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The combination of a language code and a country code to specify the language to be used in the payment.',
    )
    shopperName: Optional[Name] = Field(None, description="The shopper's full name.")
    shopperReference: Optional[str] = Field(
        None,
        description='Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).',
    )
    store: Optional[constr(min_length=1, max_length=16)] = Field(
        None,
        description='The ecommerce or point-of-sale store that is processing the payment. Used in [partner model integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for Adyen for Platforms.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    threeDS2RequestData: Optional[ThreeDS2RequestData] = Field(
        None,
        description='Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.',
    )
    threeDSAuthenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.',
    )
    totalsGroup: Optional[constr(min_length=1, max_length=16)] = Field(
        None,
        description='The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).',
    )
    trustedShopper: Optional[bool] = Field(
        None,
        description='Set to true if the payment should be routed to a trusted MID.',
    )


class CreateCheckoutSessionRequest(BaseModel):
    accountInfo: Optional[AccountInfo] = Field(
        None,
        description='Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    additionalAmount: Optional[Amount] = Field(
        None,
        description='If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. ',
    )
    additionalData: Optional[
        Union[
            AdditionalData3DSecure,
            AdditionalDataAirline,
            AdditionalDataCarRental,
            AdditionalDataCommon,
            AdditionalDataLevel23,
            AdditionalDataLodging,
            AdditionalDataOpenInvoice,
            AdditionalDataOpi,
            AdditionalDataRatepay,
            AdditionalDataRetry,
            AdditionalDataRisk,
            AdditionalDataRiskStandalone,
            AdditionalDataSubMerchant,
            AdditionalDataTemporaryServices,
            AdditionalDataWallets,
        ]
    ] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.',
    )
    allowedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"allowedPaymentMethods":["ideal","giropay"]`',
    )
    amount: Amount = Field(..., description='The amount of the payment.')
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    authenticationData: Optional[AuthenticationData] = Field(
        None, description='Configuration data for 3DS payments.'
    )
    billingAddress: Optional[Address] = Field(
        None, description='The address where to send the invoice.'
    )
    blockedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"blockedPaymentMethods":["ideal","giropay"]`',
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    channel: Optional[Channel] = Field(
        None,
        description='The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* **iOS**\n* **Android**\n* **Web**',
    )
    company: Optional[Company] = Field(
        None, description='Information regarding the company.'
    )
    countryCode: Optional[str] = Field(
        None, description="The shopper's two-letter country code."
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    deliverAt: Optional[datetime] = Field(
        None,
        description='The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    enableOneClick: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.',
    )
    enablePayOut: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for payouts.',
    )
    enableRecurring: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.',
    )
    expiresAt: Optional[datetime] = Field(
        None,
        description='The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.',
    )
    fundOrigin: Optional[FundOrigin] = Field(
        None, description='The person or entity funding the money.'
    )
    fundRecipient: Optional[FundRecipient] = Field(
        None, description='the person or entity receiving the money'
    )
    installmentOptions: Optional[Dict[str, CheckoutSessionInstallmentOption]] = Field(
        None,
        description='A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information about the purchased items, to be included on the invoice sent to the shopper.\n> This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.',
    )
    mandate: Optional[Mandate] = Field(
        None, description='The mandate details to initiate recurring transaction.'
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request.\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. ',
    )
    mpiData: Optional[ThreeDSecureData] = Field(
        None,
        description='Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).',
    )
    recurringExpiry: Optional[str] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Only for 3D Secure 2.',
    )
    recurringFrequency: Optional[str] = Field(
        None,
        description='Minimum number of days between authorisations. Only for 3D Secure 2.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None,
        description="Defines a recurring payment type. Required when creating a token to store payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
    )
    redirectFromIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting back from the issuer.',
    )
    redirectToIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting to the issuer.',
    )
    reference: str = Field(
        ..., description='The reference to uniquely identify a payment.'
    )
    returnUrl: str = Field(
        ..., description='The URL to return to when a redirect payment is completed.'
    )
    riskData: Optional[RiskData] = Field(
        None, description='Any risk-related settings to apply to the payment.'
    )
    shopperEmail: Optional[str] = Field(
        None, description="The shopper's email address."
    )
    shopperIP: Optional[str] = Field(
        None,
        description="The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations.\nThis field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
    )
    shopperInteraction: Optional[ShopperInteraction] = Field(
        None,
        description='Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.',
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The combination of a language code and a country code to specify the language to be used in the payment.',
    )
    shopperName: Optional[Name] = Field(
        None,
        description="The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.",
    )
    shopperReference: Optional[constr(min_length=3, max_length=256)] = Field(
        None,
        description='Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splitCardFundingSources: Optional[bool] = Field(
        False,
        description='Boolean value indicating whether the card payment method should be split into separate debit and credit options.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).',
    )
    store: Optional[str] = Field(
        None,
        description='The ecommerce or point-of-sale store that is processing the payment.',
    )
    storePaymentMethod: Optional[bool] = Field(
        None,
        description='When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.',
    )
    storePaymentMethodMode: Optional[StorePaymentMethodMode] = Field(
        None,
        description='Indicates if the details of the payment method will be stored for the shopper. Possible values:\n* **disabled** – No details will be stored (default).\n* **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored.\n* **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    threeDSAuthenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.',
    )
    trustedShopper: Optional[bool] = Field(
        None,
        description='Set to true if the payment should be routed to a trusted MID.',
    )


class CreateCheckoutSessionResponse(BaseModel):
    accountInfo: Optional[AccountInfo] = Field(
        None,
        description='Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    additionalAmount: Optional[Amount] = Field(
        None,
        description='If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. ',
    )
    additionalData: Optional[
        Union[
            AdditionalData3DSecure,
            AdditionalDataAirline,
            AdditionalDataCarRental,
            AdditionalDataCommon,
            AdditionalDataLevel23,
            AdditionalDataLodging,
            AdditionalDataOpenInvoice,
            AdditionalDataOpi,
            AdditionalDataRatepay,
            AdditionalDataRetry,
            AdditionalDataRisk,
            AdditionalDataRiskStandalone,
            AdditionalDataSubMerchant,
            AdditionalDataTemporaryServices,
            AdditionalDataWallets,
        ]
    ] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.',
    )
    allowedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"allowedPaymentMethods":["ideal","giropay"]`',
    )
    amount: Amount = Field(..., description='The amount of the payment.')
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    authenticationData: Optional[AuthenticationData] = Field(
        None, description='Configuration data for 3DS payments.'
    )
    billingAddress: Optional[Address] = Field(
        None, description='The address where to send the invoice.'
    )
    blockedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"blockedPaymentMethods":["ideal","giropay"]`',
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    channel: Optional[Channel] = Field(
        None,
        description='The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* **iOS**\n* **Android**\n* **Web**',
    )
    company: Optional[Company] = Field(
        None, description='Information regarding the company.'
    )
    countryCode: Optional[str] = Field(
        None, description="The shopper's two-letter country code."
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    deliverAt: Optional[datetime] = Field(
        None,
        description='The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    enableOneClick: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.',
    )
    enablePayOut: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for payouts.',
    )
    enableRecurring: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.',
    )
    expiresAt: datetime = Field(
        ...,
        description='The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.',
    )
    fundOrigin: Optional[FundOrigin] = Field(
        None, description='The person or entity funding the money.'
    )
    fundRecipient: Optional[FundRecipient] = Field(
        None, description='the person or entity receiving the money'
    )
    id: str = Field(..., description='A unique identifier of the session.')
    installmentOptions: Optional[Dict[str, CheckoutSessionInstallmentOption]] = Field(
        None,
        description='A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information about the purchased items, to be included on the invoice sent to the shopper.\n> This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.',
    )
    mandate: Optional[Mandate] = Field(
        None, description='The mandate details to initiate recurring transaction.'
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request.\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. ',
    )
    mode: Optional[Mode] = Field(
        'embedded',
        description='Indicates the type of front end integration. Possible values:\n* **embedded** (default): Drop-in or Components integration\n* **hosted**: Hosted Checkout integration',
    )
    mpiData: Optional[ThreeDSecureData] = Field(
        None,
        description='Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).',
    )
    recurringExpiry: Optional[str] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Only for 3D Secure 2.',
    )
    recurringFrequency: Optional[str] = Field(
        None,
        description='Minimum number of days between authorisations. Only for 3D Secure 2.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None,
        description="Defines a recurring payment type. Required when creating a token to store payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
    )
    redirectFromIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting back from the issuer.',
    )
    redirectToIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting to the issuer.',
    )
    reference: str = Field(
        ..., description='The reference to uniquely identify a payment.'
    )
    returnUrl: str = Field(
        ..., description='The URL to return to when a redirect payment is completed.'
    )
    riskData: Optional[RiskData] = Field(
        None, description='Any risk-related settings to apply to the payment.'
    )
    sessionData: Optional[str] = Field(
        None, description='The payment session data you need to pass to your front end.'
    )
    shopperEmail: Optional[str] = Field(
        None, description="The shopper's email address."
    )
    shopperIP: Optional[str] = Field(
        None,
        description="The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations.\nThis field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
    )
    shopperInteraction: Optional[ShopperInteraction] = Field(
        None,
        description='Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.',
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The combination of a language code and a country code to specify the language to be used in the payment.',
    )
    shopperName: Optional[Name] = Field(
        None,
        description="The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.",
    )
    shopperReference: Optional[constr(min_length=3, max_length=256)] = Field(
        None,
        description='Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splitCardFundingSources: Optional[bool] = Field(
        False,
        description='Boolean value indicating whether the card payment method should be split into separate debit and credit options.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).',
    )
    store: Optional[str] = Field(
        None,
        description='The ecommerce or point-of-sale store that is processing the payment.',
    )
    storePaymentMethod: Optional[bool] = Field(
        None,
        description='When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.',
    )
    storePaymentMethodMode: Optional[StorePaymentMethodMode] = Field(
        None,
        description='Indicates if the details of the payment method will be stored for the shopper. Possible values:\n* **disabled** – No details will be stored (default).\n* **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored.\n* **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    threeDSAuthenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.',
    )
    trustedShopper: Optional[bool] = Field(
        None,
        description='Set to true if the payment should be routed to a trusted MID.',
    )


class CreatePaymentAmountUpdateRequest(BaseModel):
    amount: Amount = Field(
        ...,
        description='The updated amount. The `currency` must match the currency used in authorisation.',
    )
    industryUsage: Optional[IndustryUsage1] = Field(
        None,
        description='The reason for the amount update. Possible values: \n* **delayedCharge** \n* **noShow** \n* **installment**',
    )
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    reference: Optional[str] = Field(
        None,
        description='Your reference for the amount update request. Maximum length: 80 characters.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )


class CreatePaymentCaptureRequest(BaseModel):
    amount: Amount = Field(
        ...,
        description='The amount that you want to capture. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.',
    )
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    reference: Optional[str] = Field(
        None,
        description='Your reference for the capture request. Maximum length: 80 characters.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )


class CreatePaymentLinkRequest(BaseModel):
    allowedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"allowedPaymentMethods":["ideal","giropay"]`',
    )
    amount: Amount = Field(..., description='The payment amount and currency.')
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    billingAddress: Optional[Address] = Field(
        None, description='The address where to send the invoice.'
    )
    blockedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"blockedPaymentMethods":["ideal","giropay"]`',
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    countryCode: Optional[str] = Field(
        None, description="The shopper's two-letter country code."
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    deliverAt: Optional[datetime] = Field(
        None,
        description='The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    description: Optional[str] = Field(
        None,
        description='A short description visible on the payment page.\nMaximum length: 280 characters.',
    )
    expiresAt: Optional[str] = Field(
        None,
        description='The date when the payment link expires.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.\n\nThe maximum expiry date is 70 days after the payment link is created.\n\nIf not provided, the payment link expires 24 hours after it was created.',
    )
    installmentOptions: Optional[Dict[str, InstallmentOption]] = Field(
        None,
        description='A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information about the purchased items, to be included on the invoice sent to the shopper.\nThis parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, and Zip.',
    )
    manualCapture: Optional[bool] = Field(
        None,
        description='Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).',
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier for which the payment link is created.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimitations:\n* Maximum 20 key-value pairs per request. Otherwise, error "177" occurs: "Metadata size exceeds limit"\n* Maximum 20 characters per key. Otherwise, error "178" occurs: "Metadata key size exceeds limit"\n* A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None,
        description="Defines a recurring payment type. Required when creating a token to store payment details.\nPossible values:\n* **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
    )
    reference: str = Field(
        ...,
        description='A reference that is used to uniquely identify the payment in future communications about the payment status.',
    )
    requiredShopperFields: Optional[List[RequiredShopperField]] = Field(
        None,
        description="List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).\n\nPossible values:\n* **billingAddress** – The address where to send the invoice.\n* **deliveryAddress** – The address where the purchased goods should be delivered.\n* **shopperEmail** – The shopper's email address.\n* **shopperName** – The shopper's full name.\n* **telephoneNumber** – The shopper's phone number.\n",
    )
    returnUrl: Optional[str] = Field(
        None,
        description='Website URL used for redirection after payment is completed.\nIf provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.',
    )
    reusable: Optional[bool] = Field(
        None,
        description='Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.',
    )
    riskData: Optional[RiskData] = Field(
        None, description='Any risk-related settings to apply to the payment.'
    )
    shopperEmail: Optional[str] = Field(
        None, description="The shopper's email address."
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.\n\nFor a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).',
    )
    shopperName: Optional[Name] = Field(
        None,
        description="The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.",
    )
    shopperReference: Optional[constr(min_length=3, max_length=256)] = Field(
        None,
        description='Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    showRemovePaymentMethodButton: Optional[bool] = Field(
        True,
        description='Set to **false** to hide the button that lets the shopper remove a stored payment method.',
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splitCardFundingSources: Optional[bool] = Field(
        False,
        description='Boolean value indicating whether the card payment method should be split into separate debit and credit options.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )
    store: Optional[str] = Field(
        None, description='The physical store, for which this payment is processed.'
    )
    storePaymentMethodMode: Optional[StorePaymentMethodMode] = Field(
        None,
        description='Indicates if the details of the payment method will be stored for the shopper. Possible values:\n* **disabled** – No details will be stored (default).\n* **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored.\n* **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    themeId: Optional[str] = Field(
        None,
        description='A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.',
    )


class CreatePaymentRefundRequest(BaseModel):
    amount: Amount = Field(
        ...,
        description='The amount that you want to refund. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.',
    )
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    merchantRefundReason: Optional[MerchantRefundReason] = Field(
        None, description='Your reason for the refund request'
    )
    reference: Optional[str] = Field(
        None,
        description='Your reference for the refund request. Maximum length: 80 characters.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )


class DonationResponse(BaseModel):
    amount: Optional[Amount] = Field(
        None, description='Authorised amount in the transaction.'
    )
    donationAccount: Optional[str] = Field(
        None,
        description='The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding).',
    )
    id: Optional[str] = Field(None, description='Your unique resource identifier.')
    merchantAccount: Optional[str] = Field(
        None,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    payment: Optional[PaymentResponse] = Field(
        None, description='Action to be taken for completing the payment.'
    )
    reference: Optional[str] = Field(
        None,
        description='The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens ("-"). Maximum length: 80 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the donation transaction.\n\nPossible values:\n* **completed**\n* **pending**\n* **refused**',
    )


class PaymentAmountUpdateResource(BaseModel):
    amount: Amount = Field(..., description='The updated amount.')
    industryUsage: Optional[IndustryUsage1] = Field(
        None,
        description='The reason for the amount update. Possible values: \n* **delayedCharge** \n* **noShow** \n* **installment**',
    )
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    paymentPspReference: str = Field(
        ...,
        description='The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to update. ',
    )
    pspReference: str = Field(
        ...,
        description="Adyen's 16-character reference associated with the amount update request.",
    )
    reference: str = Field(
        ...,
        description='Your reference for the amount update request. Maximum length: 80 characters.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )
    status: Status1 = Field(
        ...,
        description='The status of your request. This will always have the value **received**.',
    )


class PaymentCaptureResource(BaseModel):
    amount: Amount = Field(..., description='The captured amount.')
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.',
    )
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    paymentPspReference: str = Field(
        ...,
        description='The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to capture. ',
    )
    pspReference: str = Field(
        ...,
        description="Adyen's 16-character reference associated with the capture request.",
    )
    reference: Optional[str] = Field(
        None, description='Your reference for the capture request.'
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )
    status: Status1 = Field(
        ...,
        description='The status of your request. This will always have the value **received**.',
    )


class PaymentDonationRequest(BaseModel):
    accountInfo: Optional[AccountInfo] = Field(
        None,
        description='Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    additionalAmount: Optional[Amount] = Field(
        None,
        description='If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. ',
    )
    additionalData: Optional[
        Union[
            AdditionalData3DSecure,
            AdditionalDataAirline,
            AdditionalDataCarRental,
            AdditionalDataCommon,
            AdditionalDataLevel23,
            AdditionalDataLodging,
            AdditionalDataOpenInvoice,
            AdditionalDataOpi,
            AdditionalDataRatepay,
            AdditionalDataRetry,
            AdditionalDataRisk,
            AdditionalDataRiskStandalone,
            AdditionalDataSubMerchant,
            AdditionalDataTemporaryServices,
            AdditionalDataWallets,
        ]
    ] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.',
    )
    amount: Amount = Field(
        ...,
        description='The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).',
    )
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    authenticationData: Optional[AuthenticationData] = Field(
        None, description='Data for 3DS authentication.'
    )
    billingAddress: Optional[Address] = Field(
        None,
        description='The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada.',
    )
    browserInfo: Optional[BrowserInfo] = Field(
        None,
        description="The shopper's browser information.\n> For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.",
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    channel: Optional[Channel] = Field(
        None,
        description='The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* iOS\n* Android\n* Web',
    )
    checkoutAttemptId: Optional[str] = Field(
        None,
        description='Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.',
    )
    company: Optional[Company] = Field(
        None, description='Information regarding the company.'
    )
    conversionId: Optional[str] = Field(
        None,
        description='Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.',
    )
    countryCode: Optional[str] = Field(
        None,
        description='The shopper country.\n\nFormat: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nExample: NL or DE',
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    dccQuote: Optional[ForexQuote] = Field(
        None,
        description='The forex quote as returned in the response of the forex service.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    deliveryDate: Optional[datetime] = Field(
        None,
        description='The date and time the purchased goods should be delivered.\n\nFormat [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\nExample: 2017-07-17T13:42:40.428+01:00',
    )
    deviceFingerprint: Optional[constr(max_length=5000)] = Field(
        None,
        description="A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).",
    )
    donationAccount: str = Field(
        ..., description='Donation account to which the transaction is credited.'
    )
    donationOriginalPspReference: Optional[str] = Field(
        None,
        description='PSP reference of the transaction from which the donation token is generated. Required when `donationToken` is provided.',
    )
    donationToken: Optional[str] = Field(
        None, description='Donation token received in the `/payments` call.'
    )
    enableOneClick: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.',
    )
    enablePayOut: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for payouts.',
    )
    enableRecurring: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.',
    )
    entityType: Optional[EntityType] = Field(
        None, description='The type of the entity the payment is processed for.'
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    industryUsage: Optional[IndustryUsage1] = Field(
        None,
        description='The reason for the amount update. Possible values: \n* **delayedCharge** \n* **noShow** \n* **installment**',
    )
    installments: Optional[Installments] = Field(
        None,
        description='Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.',
    )
    localizedShopperStatement: Optional[Dict[str, str]] = Field(
        None,
        description='This field allows merchants to use dynamic shopper statement in local character sets.\nThe local shopper statement field can be supplied in markets where localized merchant descriptors are used. Currently, Adyen only supports this in the Japanese market\n.The available character sets at the moment are:\n* Processing in Japan: **ja-Kana**\nThe character set **ja-Kana** supports UTF-8 based Katakana and alphanumeric and special characters.\nMerchants can use half-width or full-width characters.\nAn example request would be:\n> {\n  "shopperStatement" : "ADYEN - SELLER-A",\n  "localizedShopperStatement" : {\n    "ja-Kana" : "ADYEN - セラーA"\n  }\n}\nWe recommend merchants to always supply the field localizedShopperStatement in addition to the field shopperStatement.It is issuer dependent whether the localized shopper statement field is supported.\nIn the case of non-domestic transactions (e.g. US-issued cards processed in JP) the field `shopperStatement` is used to modify the statement of the shopper.\nAdyen handles the complexity of ensuring the correct descriptors are assigned.\nPlease note, this field can be used for only Visa and Mastercard transactions.',
    )
    mandate: Optional[Mandate] = Field(
        None, description='The mandate details to initiate recurring transaction.'
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.',
    )
    merchantRiskIndicator: Optional[MerchantRiskIndicator] = Field(
        None,
        description='Additional risk fields for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request. When exceeding, the "177" error occurs: "Metadata size exceeds limit".\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. ',
    )
    mpiData: Optional[ThreeDSecureData] = Field(
        None,
        description='Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).',
    )
    order: Optional[EncryptedOrderData] = Field(
        None, description='The order information required for partial payments.'
    )
    orderReference: Optional[str] = Field(
        None,
        description='When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.',
    )
    origin: Optional[constr(max_length=80)] = Field(
        None,
        description='Required for the 3D Secure 2 `channel` **Web** integration.\n\nSet this parameter to the origin URL of the page that you are loading the 3D Secure Component from.',
    )
    paymentMethod: Union[
        AchDetails,
        AfterpayDetails,
        AmazonPayDetails,
        AndroidPayDetails,
        ApplePayDetails,
        BacsDirectDebitDetails,
        BillDeskDetails,
        BlikDetails,
        CardDetails,
        CellulantDetails,
        DokuDetails,
        DotpayDetails,
        DragonpayDetails,
        EcontextVoucherDetails,
        GenericIssuerPaymentMethodDetails,
        GiropayDetails,
        GooglePayDetails,
        IdealDetails,
        KlarnaDetails,
        MasterpassDetails,
        MbwayDetails,
        MobilePayDetails,
        MolPayDetails,
        OpenInvoiceDetails,
        PayPalDetails,
        PayUUpiDetails,
        PayWithGoogleDetails,
        PaymentDetails,
        RatepayDetails,
        SamsungPayDetails,
        SepaDirectDebitDetails,
        StoredPaymentMethodDetails,
        UpiCollectDetails,
        UpiIntentDetails,
        VippsDetails,
        VisaCheckoutDetails,
        WeChatPayDetails,
        WeChatPayMiniProgramDetails,
        ZipDetails,
    ] = Field(
        ..., description='The type and required details of a payment method to use.'
    )
    platformChargebackLogic: Optional[PlatformChargebackLogic] = Field(
        None, description='Defines the behavior to be applied in case of a chargeback.'
    )
    recurringExpiry: Optional[str] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Only for 3D Secure 2.',
    )
    recurringFrequency: Optional[str] = Field(
        None,
        description='Minimum number of days between authorisations. Only for 3D Secure 2.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None,
        description="Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
    )
    redirectFromIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting back from the issuer.',
    )
    redirectToIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting to the issuer.',
    )
    reference: str = Field(
        ...,
        description='The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens ("-").\nMaximum length: 80 characters.',
    )
    returnUrl: constr(max_length=8000) = Field(
        ...,
        description='The URL to return to in case of a redirection.\nThe format depends on the channel. This URL can have a maximum of 1024 characters.\n* For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number.\nExample: `https://your-company.com/checkout?shopperOrder=12xy`\n* For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app).\nExample: `my-app://`\n* For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters).\nExample: `my-app://your.package.name`',
    )
    riskData: Optional[RiskData] = Field(
        None,
        description='Contains risk data, such as client-side data, used to identify risk for a transaction.',
    )
    sessionValidity: Optional[str] = Field(
        None,
        description='The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.\n\nFor example: 2020-07-18T15:42:40.428+01:00',
    )
    shopperEmail: Optional[str] = Field(
        None,
        description="The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.\n> For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.",
    )
    shopperIP: Optional[str] = Field(
        None,
        description="The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations.\nThis field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
    )
    shopperInteraction: Optional[ShopperInteraction] = Field(
        None,
        description='Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.',
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The combination of a language code and a country code to specify the language to be used in the payment.',
    )
    shopperName: Optional[Name] = Field(None, description="The shopper's full name.")
    shopperReference: Optional[str] = Field(
        None,
        description='Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).',
    )
    store: Optional[constr(min_length=1, max_length=16)] = Field(
        None,
        description='The ecommerce or point-of-sale store that is processing the payment. Used in [partner model integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for Adyen for Platforms.',
    )
    storePaymentMethod: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be stored.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    threeDS2RequestData: Optional[ThreeDS2RequestData] = Field(
        None,
        description='Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.',
    )
    threeDSAuthenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.',
    )
    trustedShopper: Optional[bool] = Field(
        None,
        description='Set to true if the payment should be routed to a trusted MID.',
    )


class PaymentLinkResponse(BaseModel):
    allowedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"allowedPaymentMethods":["ideal","giropay"]`',
    )
    amount: Amount = Field(..., description='The payment amount and currency.')
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    billingAddress: Optional[Address] = Field(
        None, description='The address where to send the invoice.'
    )
    blockedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"blockedPaymentMethods":["ideal","giropay"]`',
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    countryCode: Optional[str] = Field(
        None, description="The shopper's two-letter country code."
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    deliverAt: Optional[datetime] = Field(
        None,
        description='The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    description: Optional[str] = Field(
        None,
        description='A short description visible on the payment page.\nMaximum length: 280 characters.',
    )
    expiresAt: Optional[str] = Field(
        None,
        description='The date when the payment link expires.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.\n\nThe maximum expiry date is 70 days after the payment link is created.\n\nIf not provided, the payment link expires 24 hours after it was created.',
    )
    id: str = Field(..., description='A unique identifier of the payment link.')
    installmentOptions: Optional[Dict[str, InstallmentOption]] = Field(
        None,
        description='A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information about the purchased items, to be included on the invoice sent to the shopper.\nThis parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, and Zip.',
    )
    manualCapture: Optional[bool] = Field(
        None,
        description='Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).',
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier for which the payment link is created.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimitations:\n* Maximum 20 key-value pairs per request. Otherwise, error "177" occurs: "Metadata size exceeds limit"\n* Maximum 20 characters per key. Otherwise, error "178" occurs: "Metadata key size exceeds limit"\n* A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None,
        description="Defines a recurring payment type. Required when creating a token to store payment details.\nPossible values:\n* **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
    )
    reference: str = Field(
        ...,
        description='A reference that is used to uniquely identify the payment in future communications about the payment status.',
    )
    requiredShopperFields: Optional[List[RequiredShopperField]] = Field(
        None,
        description="List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).\n\nPossible values:\n* **billingAddress** – The address where to send the invoice.\n* **deliveryAddress** – The address where the purchased goods should be delivered.\n* **shopperEmail** – The shopper's email address.\n* **shopperName** – The shopper's full name.\n* **telephoneNumber** – The shopper's phone number.\n",
    )
    returnUrl: Optional[str] = Field(
        None,
        description='Website URL used for redirection after payment is completed.\nIf provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.',
    )
    reusable: Optional[bool] = Field(
        None,
        description='Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.',
    )
    riskData: Optional[RiskData] = Field(
        None, description='Any risk-related settings to apply to the payment.'
    )
    shopperEmail: Optional[str] = Field(
        None, description="The shopper's email address."
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.\n\nFor a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).',
    )
    shopperName: Optional[Name] = Field(
        None,
        description="The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.",
    )
    shopperReference: Optional[constr(min_length=3, max_length=256)] = Field(
        None,
        description='Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    showRemovePaymentMethodButton: Optional[bool] = Field(
        True,
        description='Set to **false** to hide the button that lets the shopper remove a stored payment method.',
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splitCardFundingSources: Optional[bool] = Field(
        False,
        description='Boolean value indicating whether the card payment method should be split into separate debit and credit options.',
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )
    status: Status4 = Field(
        ...,
        description='Status of the payment link. Possible values:\n* **active**: The link can be used to make payments.\n* **expired**: The expiry date for the payment link has passed. Shoppers can no longer use the link to make payments.\n* **completed**: The shopper completed the payment.\n* **paymentPending**: The shopper is in the process of making the payment. Applies to payment methods with an asynchronous flow.',
    )
    store: Optional[str] = Field(
        None, description='The physical store, for which this payment is processed.'
    )
    storePaymentMethodMode: Optional[StorePaymentMethodMode] = Field(
        None,
        description='Indicates if the details of the payment method will be stored for the shopper. Possible values:\n* **disabled** – No details will be stored (default).\n* **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored.\n* **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    themeId: Optional[str] = Field(
        None,
        description='A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.',
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description='The date when the payment link status was updated.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.',
    )
    url: str = Field(
        ..., description='The URL at which the shopper can complete the payment.'
    )


class PaymentRefundResource(BaseModel):
    amount: Amount = Field(..., description='The refund amount.')
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.',
    )
    merchantAccount: str = Field(
        ..., description='The merchant account that is used to process the payment.'
    )
    merchantRefundReason: Optional[MerchantRefundReason] = Field(
        None, description='Your reason for the refund request.'
    )
    paymentPspReference: str = Field(
        ...,
        description='The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to refund. ',
    )
    pspReference: str = Field(
        ...,
        description="Adyen's 16-character reference associated with the refund request.",
    )
    reference: Optional[str] = Field(
        None, description='Your reference for the refund request.'
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).',
    )
    status: Status5 = Field(
        ...,
        description='The status of your request. This will always have the value **received**.',
    )


class PaymentRequest(BaseModel):
    accountInfo: Optional[AccountInfo] = Field(
        None,
        description='Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    additionalAmount: Optional[Amount] = Field(
        None,
        description='If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. ',
    )
    additionalData: Optional[
        Union[
            AdditionalData3DSecure,
            AdditionalDataAirline,
            AdditionalDataCarRental,
            AdditionalDataCommon,
            AdditionalDataLevel23,
            AdditionalDataLodging,
            AdditionalDataOpenInvoice,
            AdditionalDataOpi,
            AdditionalDataRatepay,
            AdditionalDataRetry,
            AdditionalDataRisk,
            AdditionalDataRiskStandalone,
            AdditionalDataSubMerchant,
            AdditionalDataTemporaryServices,
            AdditionalDataWallets,
        ]
    ] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.',
    )
    amount: Amount = Field(
        ...,
        description='The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).',
    )
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    authenticationData: Optional[AuthenticationData] = Field(
        None, description='Data for 3DS authentication.'
    )
    billingAddress: Optional[Address] = Field(
        None,
        description='The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada.',
    )
    browserInfo: Optional[BrowserInfo] = Field(
        None,
        description="The shopper's browser information.\n> For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.",
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    channel: Optional[Channel] = Field(
        None,
        description='The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* iOS\n* Android\n* Web',
    )
    checkoutAttemptId: Optional[str] = Field(
        None,
        description='Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.',
    )
    company: Optional[Company] = Field(
        None, description='Information regarding the company.'
    )
    conversionId: Optional[str] = Field(
        None,
        description='Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.',
    )
    countryCode: Optional[str] = Field(
        None,
        description='The shopper country.\n\nFormat: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nExample: NL or DE',
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    dccQuote: Optional[ForexQuote] = Field(
        None,
        description='The forex quote as returned in the response of the forex service.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    deliveryDate: Optional[datetime] = Field(
        None,
        description='The date and time the purchased goods should be delivered.\n\nFormat [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\nExample: 2017-07-17T13:42:40.428+01:00',
    )
    deviceFingerprint: Optional[constr(max_length=5000)] = Field(
        None,
        description="A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).",
    )
    enableOneClick: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.',
    )
    enablePayOut: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for payouts.',
    )
    enableRecurring: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.',
    )
    entityType: Optional[EntityType] = Field(
        None, description='The type of the entity the payment is processed for.'
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    industryUsage: Optional[IndustryUsage1] = Field(
        None,
        description='The reason for the amount update. Possible values: \n* **delayedCharge** \n* **noShow** \n* **installment**',
    )
    installments: Optional[Installments] = Field(
        None,
        description='Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.',
    )
    localizedShopperStatement: Optional[Dict[str, str]] = Field(
        None,
        description='This field allows merchants to use dynamic shopper statement in local character sets.\nThe local shopper statement field can be supplied in markets where localized merchant descriptors are used. Currently, Adyen only supports this in the Japanese market\n.The available character sets at the moment are:\n* Processing in Japan: **ja-Kana**\nThe character set **ja-Kana** supports UTF-8 based Katakana and alphanumeric and special characters.\nMerchants can use half-width or full-width characters.\nAn example request would be:\n> {\n  "shopperStatement" : "ADYEN - SELLER-A",\n  "localizedShopperStatement" : {\n    "ja-Kana" : "ADYEN - セラーA"\n  }\n}\nWe recommend merchants to always supply the field localizedShopperStatement in addition to the field shopperStatement.It is issuer dependent whether the localized shopper statement field is supported.\nIn the case of non-domestic transactions (e.g. US-issued cards processed in JP) the field `shopperStatement` is used to modify the statement of the shopper.\nAdyen handles the complexity of ensuring the correct descriptors are assigned.\nPlease note, this field can be used for only Visa and Mastercard transactions.',
    )
    mandate: Optional[Mandate] = Field(
        None, description='The mandate details to initiate recurring transaction.'
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.',
    )
    merchantRiskIndicator: Optional[MerchantRiskIndicator] = Field(
        None,
        description='Additional risk fields for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request. When exceeding, the "177" error occurs: "Metadata size exceeds limit".\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. ',
    )
    mpiData: Optional[ThreeDSecureData] = Field(
        None,
        description='Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).',
    )
    order: Optional[EncryptedOrderData] = Field(
        None, description='The order information required for partial payments.'
    )
    orderReference: Optional[str] = Field(
        None,
        description='When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.',
    )
    origin: Optional[constr(max_length=80)] = Field(
        None,
        description='Required for the 3D Secure 2 `channel` **Web** integration.\n\nSet this parameter to the origin URL of the page that you are loading the 3D Secure Component from.',
    )
    paymentMethod: Union[
        AchDetails,
        AfterpayDetails,
        AmazonPayDetails,
        AndroidPayDetails,
        ApplePayDetails,
        BacsDirectDebitDetails,
        BillDeskDetails,
        BlikDetails,
        CardDetails,
        CellulantDetails,
        DokuDetails,
        DotpayDetails,
        DragonpayDetails,
        EcontextVoucherDetails,
        GenericIssuerPaymentMethodDetails,
        GiropayDetails,
        GooglePayDetails,
        IdealDetails,
        KlarnaDetails,
        MasterpassDetails,
        MbwayDetails,
        MobilePayDetails,
        MolPayDetails,
        OpenInvoiceDetails,
        PayPalDetails,
        PayUUpiDetails,
        PayWithGoogleDetails,
        PaymentDetails,
        RatepayDetails,
        SamsungPayDetails,
        SepaDirectDebitDetails,
        StoredPaymentMethodDetails,
        UpiCollectDetails,
        UpiIntentDetails,
        VippsDetails,
        VisaCheckoutDetails,
        WeChatPayDetails,
        WeChatPayMiniProgramDetails,
        ZipDetails,
    ] = Field(
        ..., description='The type and required details of a payment method to use.'
    )
    platformChargebackLogic: Optional[PlatformChargebackLogic] = Field(
        None, description='Defines the behavior to be applied in case of a chargeback.'
    )
    recurringExpiry: Optional[str] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Only for 3D Secure 2.',
    )
    recurringFrequency: Optional[str] = Field(
        None,
        description='Minimum number of days between authorisations. Only for 3D Secure 2.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None,
        description="Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
    )
    redirectFromIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting back from the issuer.',
    )
    redirectToIssuerMethod: Optional[str] = Field(
        None,
        description='Specifies the redirect method (GET or POST) when redirecting to the issuer.',
    )
    reference: str = Field(
        ...,
        description='The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens ("-").\nMaximum length: 80 characters.',
    )
    returnUrl: constr(max_length=8000) = Field(
        ...,
        description='The URL to return to in case of a redirection.\nThe format depends on the channel. This URL can have a maximum of 1024 characters.\n* For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number.\nExample: `https://your-company.com/checkout?shopperOrder=12xy`\n* For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app).\nExample: `my-app://`\n* For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters).\nExample: `my-app://your.package.name`',
    )
    riskData: Optional[RiskData] = Field(
        None,
        description='Contains risk data, such as client-side data, used to identify risk for a transaction.',
    )
    sessionValidity: Optional[str] = Field(
        None,
        description='The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.\n\nFor example: 2020-07-18T15:42:40.428+01:00',
    )
    shopperEmail: Optional[str] = Field(
        None,
        description="The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.\n> For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.",
    )
    shopperIP: Optional[str] = Field(
        None,
        description="The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations.\nThis field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
    )
    shopperInteraction: Optional[ShopperInteraction] = Field(
        None,
        description='Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.',
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The combination of a language code and a country code to specify the language to be used in the payment.',
    )
    shopperName: Optional[Name] = Field(None, description="The shopper's full name.")
    shopperReference: Optional[str] = Field(
        None,
        description='Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).',
    )
    store: Optional[constr(min_length=1, max_length=16)] = Field(
        None,
        description='The ecommerce or point-of-sale store that is processing the payment. Used in [partner model integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for Adyen for Platforms.',
    )
    storePaymentMethod: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be stored.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    threeDS2RequestData: Optional[ThreeDS2RequestData] = Field(
        None,
        description='Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.',
    )
    threeDSAuthenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.',
    )
    trustedShopper: Optional[bool] = Field(
        None,
        description='Set to true if the payment should be routed to a trusted MID.',
    )


class PaymentSetupRequest(BaseModel):
    additionalAmount: Optional[Amount] = Field(
        None,
        description='If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. ',
    )
    additionalData: Optional[
        Union[
            AdditionalData3DSecure,
            AdditionalDataAirline,
            AdditionalDataCarRental,
            AdditionalDataCommon,
            AdditionalDataLevel23,
            AdditionalDataLodging,
            AdditionalDataOpenInvoice,
            AdditionalDataOpi,
            AdditionalDataRatepay,
            AdditionalDataRetry,
            AdditionalDataRisk,
            AdditionalDataRiskStandalone,
            AdditionalDataSubMerchant,
            AdditionalDataTemporaryServices,
            AdditionalDataWallets,
        ]
    ] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.',
    )
    allowedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"allowedPaymentMethods":["ideal","giropay"]`',
    )
    amount: Amount = Field(
        ...,
        description='The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).',
    )
    applicationInfo: Optional[ApplicationInfo] = Field(
        None,
        description='Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).',
    )
    billingAddress: Optional[Address] = Field(
        None,
        description='The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada.',
    )
    blockedPaymentMethods: Optional[List[str]] = Field(
        None,
        description='List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `"blockedPaymentMethods":["ideal","giropay"]`',
    )
    captureDelayHours: Optional[int] = Field(
        None,
        description='The delay between the authorisation and scheduled auto-capture, specified in hours.',
    )
    channel: Optional[Channel] = Field(
        None,
        description='The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* iOS\n* Android\n* Web',
    )
    checkoutAttemptId: Optional[str] = Field(
        None,
        description='Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.',
    )
    company: Optional[Company] = Field(
        None, description='Information regarding the company.'
    )
    configuration: Optional[Configuration] = Field(
        None, description='Specify configurations to enable additional features.'
    )
    conversionId: Optional[str] = Field(
        None,
        description='Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.',
    )
    countryCode: str = Field(
        ...,
        description='The shopper country.\n\nFormat: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nExample: NL or DE',
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description="The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
    )
    dccQuote: Optional[ForexQuote] = Field(
        None,
        description='The forex quote as returned in the response of the forex service.',
    )
    deliveryAddress: Optional[Address] = Field(
        None, description='The address where the purchased goods should be delivered.'
    )
    deliveryDate: Optional[datetime] = Field(
        None,
        description='The date and time the purchased goods should be delivered.\n\nFormat [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\nExample: 2017-07-17T13:42:40.428+01:00',
    )
    enableOneClick: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.',
    )
    enablePayOut: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for payouts.',
    )
    enableRecurring: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.',
    )
    entityType: Optional[EntityType] = Field(
        None, description='The type of the entity the payment is processed for.'
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    installments: Optional[Installments] = Field(
        None,
        description='Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).',
    )
    lineItems: Optional[List[LineItem]] = Field(
        None,
        description='Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.',
    )
    localizedShopperStatement: Optional[Dict[str, str]] = Field(
        None,
        description='This field allows merchants to use dynamic shopper statement in local character sets.\nThe local shopper statement field can be supplied in markets where localized merchant descriptors are used. Currently, Adyen only supports this in the Japanese market\n.The available character sets at the moment are:\n* Processing in Japan: **ja-Kana**\nThe character set **ja-Kana** supports UTF-8 based Katakana and alphanumeric and special characters.\nMerchants can use half-width or full-width characters.\nAn example request would be:\n> {\n  "shopperStatement" : "ADYEN - SELLER-A",\n  "localizedShopperStatement" : {\n    "ja-Kana" : "ADYEN - セラーA"\n  }\n}\nWe recommend merchants to always supply the field localizedShopperStatement in addition to the field shopperStatement.It is issuer dependent whether the localized shopper statement field is supported.\nIn the case of non-domestic transactions (e.g. US-issued cards processed in JP) the field `shopperStatement` is used to modify the statement of the shopper.\nAdyen handles the complexity of ensuring the correct descriptors are assigned.\nPlease note, this field can be used for only Visa and Mastercard transactions.',
    )
    mandate: Optional[Mandate] = Field(
        None, description='The mandate details to initiate recurring transaction.'
    )
    mcc: Optional[str] = Field(
        None,
        description='The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    merchantOrderReference: Optional[str] = Field(
        None,
        description='This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request. When exceeding, the "177" error occurs: "Metadata size exceeds limit".\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. ',
    )
    orderReference: Optional[str] = Field(
        None,
        description='When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.',
    )
    origin: Optional[str] = Field(
        None,
        description='Required for the Web integration.\n\nSet this parameter to the origin URL of the page that you are loading the SDK from.',
    )
    platformChargebackLogic: Optional[PlatformChargebackLogic] = Field(
        None, description='Defines the behavior to be applied in case of a chargeback.'
    )
    recurringExpiry: Optional[str] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Only for 3D Secure 2.',
    )
    recurringFrequency: Optional[str] = Field(
        None,
        description='Minimum number of days between authorisations. Only for 3D Secure 2.',
    )
    reference: str = Field(
        ...,
        description='The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens ("-").\nMaximum length: 80 characters.',
    )
    returnUrl: constr(max_length=8000) = Field(
        ...,
        description='The URL to return to in case of a redirection.\nThe format depends on the channel. This URL can have a maximum of 1024 characters.\n* For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number.\nExample: `https://your-company.com/checkout?shopperOrder=12xy`\n* For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app).\nExample: `my-app://`\n* For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters).\nExample: `my-app://your.package.name`',
    )
    riskData: Optional[RiskData] = Field(
        None,
        description='Contains risk data, such as client-side data, used to identify risk for a transaction.',
    )
    sdkVersion: Optional[str] = Field(
        None,
        description='The version of the SDK you are using (for Web SDK integrations only).',
    )
    sessionValidity: Optional[str] = Field(
        None,
        description='The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.\n\nFor example: 2020-07-18T15:42:40.428+01:00',
    )
    shopperEmail: Optional[str] = Field(
        None,
        description="The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.\n> For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.",
    )
    shopperIP: Optional[str] = Field(
        None,
        description="The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations.\nThis field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
    )
    shopperInteraction: Optional[ShopperInteraction] = Field(
        None,
        description='Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.',
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The combination of a language code and a country code to specify the language to be used in the payment.',
    )
    shopperName: Optional[Name] = Field(None, description="The shopper's full name.")
    shopperReference: Optional[str] = Field(
        None,
        description='Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    shopperStatement: Optional[str] = Field(
        None,
        description="The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    splits: Optional[List[Split]] = Field(
        None,
        description='An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).',
    )
    store: Optional[constr(min_length=1, max_length=16)] = Field(
        None,
        description='The ecommerce or point-of-sale store that is processing the payment. Used in [partner model integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for Adyen for Platforms.',
    )
    storePaymentMethod: Optional[bool] = Field(
        None,
        description='When true and `shopperReference` is provided, the payment details will be stored.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )
    threeDSAuthenticationOnly: Optional[bool] = Field(
        False,
        description='If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.',
    )
    token: Optional[str] = Field(
        None,
        description='The token obtained when initializing the SDK.\n\n> This parameter is required for iOS and Android; not required for Web.',
    )
    trustedShopper: Optional[bool] = Field(
        None,
        description='Set to true if the payment should be routed to a trusted MID.',
    )


class PaymentSetupResponse(BaseModel):
    paymentSession: Optional[str] = Field(
        None,
        description='The encoded payment session that you need to pass to the SDK.',
    )
    recurringDetails: Optional[List[RecurringDetail]] = Field(
        None,
        description='The detailed list of stored payment details required to generate payment forms. Will be empty if oneClick is set to false in the request.',
    )
